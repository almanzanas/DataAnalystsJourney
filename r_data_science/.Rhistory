format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-31 22:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("June 01, 2017 00:26:08 am",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-31 22:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("Apr 1, 2017 00:26:08 am",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-31 22:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("April 1, 2017 00:26:08 am",
format = "%B %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-31 22:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("April 01, 2017 00:26:08 am",
format = "%B %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-31 22:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("Mar 30, 2017 00:26:08 am",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-29 21:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("Mar 30, 2017 12:26:08 am",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-29 21:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("Mar 30, 2017 12:26:08 am",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-29 22:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
c(ct1, ct2)
cat("\n")
weekdays(c(ct1, ct2))
cat("\n")
weekdays(ct2)
gc()
as.date(ct2)
as.Date(ct2)
as.Date(ct2)
as.Date(ct1)
(crdt <- date() )
cat("\n")
(now <- as.POSIXct (crdt, format = "%A %B %d %H:%M:%S %Y" ) )
cat("\n")
as.Date (now)
diff ( range( c(ct1, ct2) ) )
seq ( as.Date("2020-03-11"), by = 3, length = 5 )
cat("\n")
pdt <- as.POSIXct( ("2020-03-11" 13:05:00) )
seq ( as.Date("2020-03-11"), by = 3, length = 5 )
cat("\n")
pdt <- as.POSIXct( ("2020-03-11 13:05:00") )
seq ( pdt, by = 2, length = 3)
cat("\nSequence by days:\n")
seq (pdt, by = "day", length = 3)
cat("\nBy day without altering the hour: \n")
seq (pdt, by = "DSTday", length = 3)
d1 <- as.POSIXct ("2017-05-01 12:00:00")
d2 <- as.POSIXct ("2017-05-01 12:00:06")
d3 <- as.POSIXct ("2017-05-07 12:00:00")
cat("Are equal (d2 - d1) and (d3 - d1) ? :\n")
(d2 - d1) == (d3 - d1)
cat("\nSame operation but using as.numeric() : \n")
as.numeric(d2 - d1) == as.numeric(d3 - d1)
cat("\nSame as.numeric but with units=days:\n")
as.numeric(d2 - d1, units="days") == as.numeric(d3 - d1, units="days")
c(d1, NA)
cat("\n")
c(NA, d1)
cat("\n")
c( as.Date(NA), d1)
cat("\n")
c( as.POSIXct(NA), d1)
dt.df <- data.frame(
Start = as.Date ( c(seq ("2020-05-03", by="months", length = 6) ) )
)
dt.df <- data.frame(
Start = c( seq (as.Date("2020-05-03"), by="months", length = 6) ) )
)
dt.df <- data.frame(
Start = c( seq (as.Date("2020-05-03"), by="months", length = 6) )
)
# Creating a new column
dt.df$End <- c( seq (as.Date("2021-06-02"), by="months", length = 6) ) )
dt.df <- data.frame(
Start = c( seq (as.Date("2020-05-03"), by="months", length = 6) )
)
# Creating a new column
dt.df$End <- c( seq (as.Date("2021-06-02"), by="months", length = 6) )
dt.df
sapply ( nrow(dt.df),
function (i) as.numeric (dt.df[i,2] - dt.df[i,1],
units = "days") )
sapply ( 1:nrow(dt.df),
function (i) as.numeric (dt.df[i,2] - dt.df[i,1],
units = "days") )
(
c(d1, NA)
cat("\n")
c(d1, NA)
cat("\n")
c(NA, d1)
cat("\n")
c( as.Date(NA), d1)
cat("\n")
c( as.POSIXct(NA), d1)
c(d1, NA)
cat("\n")
c(NA, d1)
cat("\n")
c( as.Date(NA), d1)
cat("\n")
c( as.POSIXct(NA), d1)
?intersection
intersection( names(df), names(df2) )
intersect( names(df), names(df2) )
names(df)
names(df2)
intersect( names(df), names(df2) )
names(df)
names(df2)
df2$Paid <- c(NA,NA,NA,NA,NA)
names(df)
names(df2)
df2$Paid <- c(NA,NA,NA,NA,NA,NA)
intersect( names(df), names(df2) )
View(df)
edit(df)
data.entry(df)
df2$Paid <- 101:106
df2&Date <- rep (as.Date ("2024-02-05"), by="months", length=6)
df2$Date <- rep (as.Date ("2024-02-05"), by="months", length=6)
df2
( col.cls <- sapply(df2, function (x) class (x)[1] ) )
table(col.cls)
df2$Spouse[3] <- NA
df2$Paid[5] <- NA
df2$Paid[6] <- NA
df2$Date[2] <- NA
df2$Age[4] <- -56
sapply( df2, function(x) sum(is.na(x) ) )
sapply( df2, function(x) sum(is.na(x) ) ) |> table()
sapply( df2, function (x) sum (x < 0, na.rm = TRUE) )
sapply (df2[, match(col.cls, c("numeric", "integer") ) ], c(range, mean, median, sd) )
sapply (df2[, match(col.cls, c("numeric", "integer") ) ], function(x) %in% c(range(x), mean(x), median(x), sd(x) ) )
sapply (df2[, match(col.cls, c("numeric", "integer") ) ], function(x) c(range(x), mean(x), median(x), sd(x) ) )
sapply (df2[, match(col.cls, c("numeric", "integer") ) ], range ) )
sapply (df2[, match(col.cls, c("numeric", "integer") ) ], range )
sapply (df2[, col.cls %in% c("numeric", "integer") ], range )
sapply (df2[, col.cls %in% c("numeric", "integer"), na.rm=TRUE ], range )
sapply (df2[, col.cls %in% c("numeric", "integer") ], range, na.rm=TRUE )
sapply (df2[, col.cls %in% c("numeric", "integer") ], range, mean, na.rm=TRUE )
sapply (df2[, col.cls %in% c("numeric", "integer") ], list(mean, range), na.rm=TRUE )
sapply (df2[, col.cls %in% c("numeric", "integer") ], range, na.rm=TRUE )
sapply(df2, function(x) length(unique(na.omit(x) ) ) )
writers <- c("Asimov", "Tolstoi", "Wolf", "Joice", NA, "Abercrombie")
length(writers)
nchar(writers)
cat(
length(writers),
nchar(writers)
)
cat(
length(writers),"\n",
nchar(writers)
)
cat(
length(writers),"\n",
nchar(writers),
sep=""
)
length(writers)
nchar(writers)
( quo <- "She wrote, \"To enter a 'new-line,' type \"\\n\" .\"" )
nchar (quo)
cat(quo, "\n")
blanks <- c (" ", " ", "", "   ", "", "2016", "", " 2016", "2016", "   ")
length(blanks)
table(blanks)
names(table(blanks))
nzchar(blanks)
blanks <- c (" ", " ", "", "   ", "", "2016", "", " 2016", "2016", "   ")
length(blanks)
table(blanks)
names(table(blanks))
nzchar(blanks)
noblanks <- trimws(blanks)
blanks[nzchar(blanks)]
blanks <- c (" ", " ", "", "   ", "", "2016", "", " 2016", "2016", "   ")
length(blanks)
table(blanks)
names(table(blanks))
nzchar(blanks)
noblanks <- trimws(blanks)
blanks[nzchar(noblanks)]
blanks <- c (" ", " ", "", "   ", "", "2016", "", " 2016", "2016", "   ")
length(blanks)
table(blanks)
names(table(blanks))
nzchar(blanks)
noblanks <- trimws(blanks)
blanks[nzchar(noblanks)]
names(table(noblanks))
blanks <- c (" ", " ", "", "   ", "", "2016", "", " 2016", "2016", "   ")
length(blanks)
table(blanks)
names(table(blanks))
nzchar(blanks)
# Removing white spaces located in the start or end of a element:
noblanks <- trimws(blanks)
table(noblanks)
names(table(noblanks))
dt1 <- "2017-02-03"
# Extracting the year
substring(dt1, 1, 4)
# Extracting day and month (last five characters)
substring (nchar(dt) - 4)
dt1 <- "2017-02-03"
# Extracting the year
substring(dt1, 1, 4)
# Extracting day and month (last five characters)
substring (dt1, nchar(dt1) - 4)
nchar(dt1)
nchar(dt1) -4
substring(dt1, 6)
substring(dt1, 1, 5)
substring(dt1, 1:nchar(dt1), 1:nchar(dt1) )
substring(dt1, 1:nchar(dt1), 1:nchar(dt1) )
strsplit(dt1)
?strsplit
substring(dt1, 1:nchar(dt1), 1:nchar(dt1) )
strsplit(dt1, split = "")
substring(dt1, 1:nchar(dt1), 1:nchar(dt1) )
strsplit(dt1, split = NULL)
month.name
weekdays.name
weekdays
holid <- month.name
substring (holid[6:8], nchar(holid[6:8]) ) <- "_vac"
holid[5:9]
holid <- month.name
substring (holid[6:8], nchar(holid[6:8]) - 3 ) <- "_vac"
holid[5:9]
holid <- month.name
substring (holid[6:8], nchar(holid[6:8]) - 1 ) <- "VA"
holid[5:9]
holid <- month.name
substring (holid[6:8], nchar(holid[6:8]) - 0 ) <- "9"
holid[5:9]
holid <- month.name
substring (holid[6:8], nchar(holid[6:8] + 3) - 0 ) <- "9"
holid <- month.name
substring (holid[6:8], nchar(holid[6:8]) - 0 ) <- "9"
holid[5:9]
?casefold
.simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1, 1)), substring(s, 2),
sep = "", collapse = " ")
}
.simpleCap("the quick red fox jumps over the lazy brown dog")
format ( c(12.23, 1234.45678, 0, 10.000) )
format ( c(12.23, 1234.45678, 0, 10.000), big.mark="," )
format ( c(12.23, 1234.45678, 0, 10.000),
digits = 6, nsmall = 2, zero.print = FALSE, width = 2)
# 8 characters, 2 decimals.
sprintf ( "%8.2f", 1230.456789 )
# 0 leading the character to fill with 0 until 8 characters.
sprintf ( "%08.2f", 1230.456789 )
sprintf ( "% 8.2f", 1230.456789 )
sprintf ( "%+8.2f", 1230.456789 )
sprintf ( "%8.2d", 1230.456789 )
# 8 characters, 2 decimals.
sprintf ( "%8.2f", 1230.456789 )
# 0 leading the character to fill with 0 until 8 characters.
sprintf ( "%08.2f", 1230.456789 )
sprintf ( "% 8.2f", 1230.456789 )
sprintf ( "%+8.2f", 1230.456789 )
sprintf ( "%8d", 1230.456789 )
?sprintf
# 8 characters, 2 decimals.
sprintf ( "%9.2f", 1230.456789 )
# 0 leading the character to fill with 0 until 8 characters.
sprintf ( "%09.2f", 1230.456789 )
sprintf ( "% 9.2f", 1230.456789 )
sprintf ( "%+8.2f", 1230.456789 )
sprintf ( "%i", 1230.456789 )
# 8 characters, 2 decimals.
sprintf ( "%9.2f", 1230.456789 )
# 0 leading the character to fill with 0 until 8 characters.
sprintf ( "%09.2f", 1230.456789 )
sprintf ( "% 9.2f", 1230.456789 )
sprintf ( "%+9.2f", 1230.456789 )
sprintf ( "%-9.2f", 1230.456789 )
sprintf ( "%8.2g", 1230.456789 )
# 8 characters, 2 decimals.
sprintf ( "%9.2f", 1230.456789 )
# 0 leading the character to fill with 0 until 8 characters.
sprintf ( "%09.2f", 1230.456789 )
sprintf ( "% 9.2f", 1230.456789 )
sprintf ( "%+9.2f", 1230.456789 )
sprintf ( "%-9.2f", 1230.456789 )
sprintf ( "%9.2g", 1230.456789 )
# 8 characters, 2 decimals.
sprintf ( "%9.2f", 1230.456789 )
# 0 leading the character to fill with 0 until 8 characters.
sprintf ( "%09.2f", 1230.456789 )
# Like the previous one but with spaces
sprintf ( "% 9.2f", 1230.456789 )
# Always a simbol leading the number
sprintf ( "%+9.2f", 1230.456789 )
# Left Justified
sprintf ( "%-9.2f", 1230.456789 )
#
sprintf ( "%9.4g", 1230.456789 )
# 8 characters, 2 decimals.
sprintf ( "%9.2f", 1230.456789 )
# 0 leading the character to fill with 0 until 8 characters.
sprintf ( "%09.2f", 1230.456789 )
# Like the previous one but with spaces
sprintf ( "% 9.2f", 1230.456789 )
# Always a simbol leading the number
sprintf ( "%+9.2f", 1230.456789 )
# Left Justified
sprintf ( "%-9.2f", 1230.456789 )
#
sprintf ( "%9.3g", 1230.456789 )
costs <- c(3, 22, 456.32, 89340.4235, 1230045605.959)
sprintf ( "I spent $%d in %s", costs, month.name[2:6] )
costs <- c(3, 22, 456.32, 89340.4235, 1230045605.959)
sprintf ( "I spent $%.0f in %s", costs, month.name[2:6] )
bigs <- max (nchar (sprintf ("%.2f", costs) ) )
sprintf ("spent $%*.2f in %s",
bigs, costs, month.name[2:6] )
bigs <- max (nchar (sprintf ("%.2f", costs) ) )
sprintf ("spent $%*.2f in %s \n",
bigs, costs, month.name[2:6] )
bigs <- max (nchar (sprintf ("%.2f", costs) ) )
sprintf ("spent $%*.2f in %s",
bigs, costs, month.name[2:6] )
sprintf ("%03d", 1:15 )
100000
c( 1, 100000 )
c( 1, 100000, 123456 )
as.integer (1000000 + 1 )
format ( 1000000, scientific=FALSE)
vec <- c(1, 5, 7, 2, 8, 9, 3, 4, 10)
as.character (cut (vec, c(1, 4, 7, 10), include.lowest=TRUE, right=FALSE) )
# Generating random numbers
set.seed(168)
rand.vec <- rnorm(1000)
# cut() with breaks=5 of equal width
table (cut (rand.vec, breaks=5) )
# Using quantile() to create bins with equal number of observations
table (cut (rand.vec, quantile(rand.vec) ) )
?cut
?quantile
# Generating random numbers
set.seed(168)
rand.vec <- rnorm(1000)
# cut() with breaks=5 of equal width
table (cut (rand.vec, breaks=5) )
# Using quantile() to create bins with equal number of observations
table (cut (rand.vec, quantile(rand.vec) ) )
# quantile() with probs argument to create 5 bins instead of 2
table (cut (rand.vec,
quantile(rand.vec, probs=seq(0, 1, 0.2) ),
include.lowest = TRUE ) )
paste("a", "b", "c")
paste0( 1 == 2, 1 + 2)
paste0("Arg", LETTERS[3:7], sep=".")
paste(letters[1:5], LETTERS[5:1], collapse = "\n")
paste("a", "b", "c")
paste0( 1 == 2, 1 + 2)
paste0("Arg", sep=".", LETTERS[3:7])
paste(letters[1:5], LETTERS[5:1], collapse = "")
?paste
paste("a", "b", "c")
paste0( 1 == 2, 1 + 2)
paste0("Arg", sep=".", LETTERS[3:7])
paste(letters[1:5], LETTERS[5:1], collapse = ", ")
head (
outer (month.abb, 2016:2018, paste, sep = "." ), 5
)
monseq <- outer (month.abb, 2016:2018, paste, sep = "." )
newnam <- c("ID", paste0 ("Bal.", monseq) )
sample(newnam, 5)
head (
outer (month.abb, 2016:2018, paste, sep = "." ), 5
)
# Creating the month sequence for each year
monseq <- outer (month.abb, 2016:2018, paste, sep = "." )
# Creating the column names
newnam <- c("ID",
paste0 ("Bal.", monseq),
paste0 ("Pay.", monseq) )
sample(newnam, 5)
head (
outer (month.abb, 2021:2023, paste, sep = "." ), 5
)
# Creating the month sequence for each year
monseq <- outer (month.abb, 2021:2023, paste, sep = "." )
# Creating the column names
newnam <- c("ID",
paste0 ("Bal.", monseq),
paste0 ("Pay.", monseq) )
sample(newnam, 5)
# Alternative maybe more eficient but more tedious
p1 <- rep (c("Bal", "Pay"), 12 * 3)
# Each month 2 times for Bal and Pay, and then 3 times for the years
p2 <- rep ( rep(month.abb, each = 2), 3 )
# Each year two times, for Bal and Pay
p3 <- rep (2021:2023, each = 24)
newnam <- c("ID", paste(p1, p2, p3, sep=".") )
sample(newnam, 5)
names.df <- expand.grid (c("Bal", "Pay"),
c(2021:2023),
month.abb,
stringAsFactors=FALSE)
sample(names.df, 5)
names.df <- expand.grid (c("Bal", "Pay"),
c(2021:2023),
month.abb,
stringAsFactors=FALSE)
names.df
names.df <- expand.grid (c("Bal", "Pay"),
month.abb,
c(2021:2023) )
names.df
names.df <- expand.grid (c("Bal", "Pay"),
month.abb,
c(2021:2023) )
names.df
newnam <- paste ( names.df[["Var1"]],
names.df[["Var2"]],
names.df[["Var3"]],
sep = "." )
sample(newnam, 5)
names.df <- expand.grid (c("Bal", "Pay"),
month.abb,
c(2021:2023) )
newnam <- paste ( names.df[["Var1"]],
names.df[["Var2"]],
names.df[["Var3"]],
sep = "." )
sample(newnam, 5)
?expand.grid
gc()
set.seed(168)
rnd.dts <- as.Date (sample (0:730, size = 600), origin = "2021-01-01")
table (quarters (rnd.dts) )
talbe ( paste0 (format (rnd.dts, "%Y"), ".", quarters(rnd.dts) ) )
set.seed(168)
rnd.dts <- as.Date (sample (0:730, size = 600), origin = "2021-01-01")
table (quarters (rnd.dts) )
table ( paste0 (format (rnd.dts, "%Y"), ".", quarters(rnd.dts) ) )
?tapply
ym.order <- paste0 (2021:2023, ".", month.abb )
ym.tbl <- table (format(rnd.dts, "%Y.%b") )
ym.tbl[ym.order][3:7]
ym.order <- paste0 (2021:2023, ".", month.name )
ym.tbl <- table (format(rnd.dts, "%Y.%B") )
ym.tbl[ym.order][3:7]
ym.order <- paste0 (2021:2023, ".", month.name )
ym.tbl <- table (format(rnd.dts, "%Y.%B"), na.rm=TRUE )
ym.order <- paste0 (2021:2023, ".", month.name )
ym.tbl <- table (format(rnd.dts, "%Y.%B") )
ym.tbl[ym.order][3:7]
ym.order <- paste0 (2021:2023, ".", month.name )
ym.tbl <- table (format(rnd.dts, "%Y.%B") )
ym.tbl[ym.order][1:5]
list.files (full.names =TRUE)
paste (getwd(), list.files(), sep="/")
or.mon <- paste (month.abb, collapse = "|")
or.mon
re <- paste0 ( ".[0-3]?[0-9].*(", mo, ").*[1-2][0-9]{3}")
or.mon <- paste (month.abb, collapse = "|")
or.mon
re <- paste0 ( ".[0-3]?[0-9].*(", or.mon, ").*[1-2][0-9]{3}")
grep (re, dt, value = TRUE )
or.mon <- paste (month.abb, collapse = "|")
or.mon
re <- paste0 ( ".*[0-3]?[0-9].*(", or.mon, ").*[1-2][0-9]{3}")
grep (re, dt, value = TRUE )
dt <- c(
"Balance due 16 Jun or earlier in 2017",
"26 Aug or any day in 3021",
"'76 Trombones' marched in a 1962 film",
"4 Apr 2018", "9Aug2006",
"99 Voters May Register in 20188"
)
or.mon <- paste (month.abb, collapse = "|")
or.mon
re <- paste0 ( ".*[0-3]?[0-9].*(", or.mon, ").*[1-2][0-9]{3}")
grep (re, dt, value = TRUE )
