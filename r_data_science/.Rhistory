filter( str_detect(words, "word_") & spam_cat == 1) %>%
group_by(words) %>%
summarise( pct_sum = sum(pct) ) %>%
arrange( desc(pct_sum) )
top.words <- c(temp$words[1:23], "spam_cat")
remove(temp)
df.top <- df.long %>%
select( all_of(top.words) ) %>%
mutate( top.words.pct = rowSums( across( where(is.numeric) ) ) )
df.top <- df %>%
select( all_of(top.words) ) %>%
mutate( top.words.pct = rowSums( across( where(is.numeric) ) ) )
g1 <- ggplot(df.top) +
geom_boxplot( aes( y = spam, x = top.words.pct),
fill = c("turquoise", "coral") ) +
labs( title = "How the presence of words associated with spam emails impacts the classification (TOP23)",
subtitle = "The spam emails(1) have a ghigher percentage of those words.") +
theme_classic()
df.2 <- df %>%
mutate(word.pct = rowSums( across( where(is.numeric) ) ) )
g2 <- ggplot(df.2) +
geom_boxplot( aes( y = spam_cat, x = word.pct ),
fill = c("turquoise", "coral") ) +
labs( title = "How the presence of words associated with spam emails
impacts the classification (TOP23)",
subtitle = "The spam emails(1) have a ghigher percentage of those words.") +
theme_classic()
# Patchwork library, putting the objects into a parenthesis with a pipe
(g1 | g2)
df.top <- df %>%
select( all_of(top.words) ) %>%
mutate( top.words.pct = rowSums( across( where(is.numeric) ) ) )
g1 <- ggplot(df.top) +
geom_boxplot( aes( y = spam_cat, x = top.words.pct),
fill = c("turquoise", "coral") ) +
labs( title = "How the presence of words associated with spam emails
impacts the classification (TOP23)",
subtitle = "The spam emails(1) have a ghigher percentage of those words.") +
theme_classic()
df.2 <- df %>%
mutate(word.pct = rowSums( across( where(is.numeric) ) ) )
g2 <- ggplot(df.2) +
geom_boxplot( aes( y = spam_cat, x = word.pct ),
fill = c("turquoise", "coral") ) +
labs( title = "How spam associated words impacts the classification",
subtitle = "The spam emails(1) have a ghigher percentage of those words.") +
theme_classic()
# Patchwork library, putting the objects into a parenthesis with a pipe
(g1 | g2)
g1
rlang::last_trace()
df.top <- df %>%
select( all_of(top.words) ) %>%
mutate( top_words_pct = rowSums( across( where(is.numeric) ) ) )
df.top %>% ggplot() + geom_boxplot( aes(x = top_words_pct, y = spam_cat))
df.top <- df %>%
select( all_of(top.words) ) %>%
mutate( top_words_pct = rowSums( across( where(is.numeric) ) ) )
g1 <- ggplot(df.top) +
geom_boxplot( aes( y = factor(spam_cat), x = top.words.pct),
fill = c("turquoise", "coral") ) +
labs( title = "How the presence of words associated with spam emails
impacts the classification (TOP23)",
subtitle = "The spam emails(1) have a ghigher percentage of those words.") +
theme_classic()
df.2 <- df %>%
mutate(word.pct = rowSums( across( where(is.numeric) ) ) )
g2 <- ggplot(df.2) +
geom_boxplot( aes( y = factor(spam_cat), x = word.pct ),
fill = c("turquoise", "coral") ) +
labs( title = "How spam associated words impacts the classification",
subtitle = "The spam emails(1) have a ghigher percentage of those words.") +
theme_classic()
# Patchwork library, putting the objects into a parenthesis with a pipe
(g1 | g2)
df.top <- df %>%
select( all_of(top.words) ) %>%
mutate( top_words_pct = rowSums( across( where(is.numeric) ) ) )
g1 <- ggplot(df.top) +
geom_boxplot( aes( y = factor(spam_cat), x = top_words_pct),
fill = c("turquoise", "coral") ) +
labs( title = "How the presence of words associated with spam emails
impacts the classification (TOP23)",
subtitle = "The spam emails(1) have a ghigher percentage of those words.") +
theme_classic()
df.2 <- df %>%
mutate(word_pct = rowSums( across( where(is.numeric) ) ) )
g2 <- ggplot(df.2) +
geom_boxplot( aes( y = factor(spam_cat), x = word_pct ),
fill = c("turquoise", "coral") ) +
labs( title = "How spam associated words impacts the classification",
subtitle = "The spam emails(1) have a ghigher percentage of those words.") +
theme_classic()
# Patchwork library, putting the objects into a parenthesis with a pipe
(g1 | g2)
# Patchwork library, putting the objects into a parenthesis with a pipe
(g1 | g2)
(g1 | g2)
pos.spam <- df.top[df.top["spam_cat"] == 1][["top_words_pct"]]
pos.spam <- df.top[df.top["spam_cat"] == 1,][["top_words_pct"]]
neg.spam <- df.top[df.top["spam_cat"] == 0,][["top_words_pct"]]
pos.spam <- df.top[df.top["spam_cat"] == 1,][["top_words_pct"]]
neg.spam <- df.top[df.top["spam_cat"] == 0,][["top_words_pct"]]
ks.test(pos.spam, neg.spam)
wilcox.test(pos.spam, neg.spam)
wilx <- wilcox.test(pos.spam, neg.spam)
wilx$statistic
pos.spam <- df.top[df.top["spam_cat"] == 1,][["top_words_pct"]]
neg.spam <- df.top[df.top["spam_cat"] == 0,][["top_words_pct"]]
ks.test(pos.spam, neg.spam)
wilx <- wilcox.test(pos.spam, neg.spam)
wilx
# Size effect formula by Wendt
rbis <- (1 - (2 * wilx$statistic)) / (length(pos.spam) * length(neg.spam))
cat("U Mann Whitney effect size r = ", rbis)
pos.spam <- df.top[df.top["spam_cat"] == 1,][["top_words_pct"]]
neg.spam <- df.top[df.top["spam_cat"] == 0,][["top_words_pct"]]
ks.test(pos.spam, neg.spam)
wilx <- wilcox.test(pos.spam, neg.spam)
wilx
# Size effect formula by Wendt
rbis <- 1 - ( (2 * wilx$statistic) / (length(pos.spam) * length(neg.spam)) )
cat("U Mann Whitney effect size r = ", rbis)
1 - ((2*2)/(5*5))
wilx$parameter
length(pos.spam)
length(neg.spam)
1813 * 2788
2 * 4377855
8755710 / 5054644
(2 * wilx$statistic) / (length(pos.spam) * length(neg.spam))
# Size effect formula by Wendt
rbis <- 1 - ( (2 * wilx$statistic) / (length(pos.spam) * length(neg.spam)) )
rbis
# Size effect formula by Wendt
rbis <- (1 - ( (2 * wilx$statistic) / (length(pos.spam) * length(neg.spam)) ))
rbis
# Size effect formula by Wendt
rbis <- (2 * wilx$statistic) / (length(pos.spam) * length(neg.spam))
rbis
pos.spam <- df.top[df.top["spam_cat"] == 1,][["top_words_pct"]]
neg.spam <- df.top[df.top["spam_cat"] == 0,][["top_words_pct"]]
ks.test(pos.spam, neg.spam)
wilx <- wilcox.test(pos.spam, neg.spam)
wilx
# Size effect formula by Wendt
rbis <- sum(-1, (2 * wilx$statistic) / (length(pos.spam) * length(neg.spam)) )
cat("U Mann Whitney effect size r = ", rbis)
View(df.long)
df.long %>%
filter( str_detect(words, "char_") & spam_cat == 1) %>%
ggplot() +
geom_boxplot( aes( y = reorder(words, pct), x = pct, fill = spam_cat ) ) +
labs( title = "Percentages of special characters and their association with spam emails",
subtitle = "The frequency of appearance of some characters in emails is more associated with spam",
x = "Percentage",
y = "Character" ) +
theme_classic() +
theme( plot.subtitle = element_text( color = "darkgray", size = 10 ),
legend.position = "none")
df.char <- df %>%
select_if(str_detect(pattern = "char_")) %>%
mutate( char_pct = rowSums( across( where(is.numeric) ) ) )
df.char <- df %>%
select_if(str_detect(colnames(df), pattern = "char_")) %>%
mutate( char_pct = rowSums( across( where(is.numeric) ) ) )
df.char <- df %>%
select_if(str_detect(colnames(df), pattern = "char_")) %>%
mutate( char_pct = rowSums( across( where(is.numeric) ) ),
spam_cat = spam_cat)
df.char <- df %>%
select_if(str_detect(colnames(df), pattern = c("char_", "spam_cat"))) %>%
mutate( char_pct = rowSums( across( where(is.numeric) ) ),
spam_cat = spam_cat)
df.char <- df %>%
select_if(str_detect(colnames(df), pattern = c("char_", "spam_cat"))) %>%
mutate( char_pct = rowSums( across( where(is.numeric) ) ) )
df.char <- df %>%
select_if(str_detect(colnames(df), pattern = "char_|^spam_cat")) %>%
mutate( char_pct = rowSums( across( where(is.numeric) ) ) )
df.char <- df %>%
select_if(str_detect(colnames(df), pattern = "char_|^spam_cat")) %>%
mutate( char_pct = rowSums( across( where(is.numeric) ) ) )
g3 <- ggplot(df.char) +
geom_boxplot( aes( y = factor(spam_cat), x = char_pct),
fill = c("turquoise", "coral") ) +
labs( title = "How the presence of characters associated with spam emails
impacts the classification",
subtitle = "The spam emails(1) have a ghigher percentage of those characters.") +
theme_classic()
g3
pairwise.wilcox.test(df.char, g = factor(spam_cat) )
pairwise.wilcox.test(df.char, g = factor(df.char$spam_cat) )
# Multiple comparisons for special sharacters by spam_cat
df.char$spam_cat <- as.factor(df.char$spam_cat)
pairwise.wilcox.test(df.char, g = factor(df.char$spam_cat) )
# Multiple comparisons for special sharacters by spam_cat
df.char$spam_cat <- as.factor(df.char$spam_cat)
pairwise.wilcox.test(df.char[,1:6], g = factor(df.char$spam_cat) )
View(df.char)
df.char.long <- pivot_longer(df.char, names_to = "chars", values_to = "pct")
df.char.long <- pivot_longer(df.char, cols = 1:6, names_to = "chars", values_to = "pct")
pairwise.wilcox.test(df.char.long, g = factor(df.char.long$spam_cat) )
pairwise.wilcox.test(df.char.long, g = df.char.long$spam_cat )
pairwise.wilcox.test(df.char.long[["pct"]], g = df.char.long[["spam_cat"]] )
pairwise.wilcox.test(df.char.long[["pct"]], g = df.char.long[["chars"]] )
# Multiple comparisons for special sharacters by spam_cat
df.char.zero <- df.char %>% filter(spam_cat == 0)
df.char.one <- df.char %>% filter(spam_cat == 1)
pairwise.wilcox.test(df.char.zero[,1:6] ~ df.char.one[,1:6], g = "spam_cat" )
pairwise.wilcox.test(df.char.zero[,1:6] ~ df.char.one[,1:6])
pairwise.wilcox.test(df.char.zero[,1:6] ~ df.char.one[,1:6], g = colnames(df.char.zero[,1:6]))
df.char.zero <- df.char %>% filter(spam_cat == 0)
df.char.one <- df.char %>% filter(spam_cat == 1)
for (var in colnames(df.char.zero)) {
wilcox.test(df.char.zero[[var]], df.char.one[[var]])
}
df.char.zero <- df.char %>% filter(spam_cat == 0)
df.char.one <- df.char %>% filter(spam_cat == 1)
for (var in colnames(df.char.zero[,1:6])) {
wilcox.test(df.char.zero[[var]], df.char.one[[var]])
}
for (var in colnames(df.char.zero[,1:6])) {
wilcox.test(df.char.zero[[var]], df.char.one[[var]])
}
for (var in colnames(df.char.zero[,1:6])) {
wilx <- wilcox.test(df.char.zero[[var]], df.char.one[[var]])
print(var, wilx$p.value)
}
colnames(df.char.zero)
colnames(df.char.zero[,1:6])
df.char.zero <- df.char %>% filter(spam_cat == 0)
df.char.one <- df.char %>% filter(spam_cat == 1)
for (var in colnames(df.char.zero[,1:6])) {
wilx <- wilcox.test(df.char.zero[[var]], df.char.one[[var]])
cat("Mann-Whitney U between spam and not spam on :", var,
"\np-value:", wilx$p.value)
}
df.char.zero <- df.char %>% filter(spam_cat == 0)
df.char.one <- df.char %>% filter(spam_cat == 1)
for (var in colnames(df.char.zero[,1:6])) {
wilx <- wilcox.test(df.char.zero[[var]], df.char.one[[var]])
cat("\nMann-Whitney U between spam and not spam on :", var,
"\np-value:", wilx$p.value)
}
df.char.zero <- df.char %>% filter(spam_cat == 0)
df.char.one <- df.char %>% filter(spam_cat == 1)
for (var in colnames(df.char.zero[,1:6])) {
wilx <- wilcox.test(df.char.zero[[var]], df.char.one[[var]])
cat("\nMann-Whitney U between spam and not spam on :", var,
"\np-value:", sprintf("%6.4f", wilx$p.value))
}
cat("\nMann-Whitney U between spam and not spam on:", var,
"\np-value:", sprintf("%6.4f", wilx$p.value))
for (var in colnames(df.char.zero[,1:6])) {
wilx <- wilcox.test(df.char.zero[[var]], df.char.one[[var]])
cat("\nMann-Whitney U between spam and not spam on:", var,
"\np-value:", sprintf("%6.4f", wilx$p.value))
}
for (var in colnames(df.char.zero[,1:6])) {
boxplot(c(df.char.zero[[var]], df.char.one[[var]]),
main = paste("Character boxplot comparison on", var) )
}
for (var in colnames(df.char.zero[,1:6])) {
boxplot(df.char.zero[[var]], df.char.one[[var]],
main = paste("Character boxplot comparison on", var) )
}
for (var in colnames(df.char.zero[,1:6])) {
boxplot(df.char.zero[[var]], df.char.one[[var]],
main = paste("Character boxplot comparison on", var),
xlab = "Not Spam (0) | Spam (1)")
}
df.char.long %>% ggplot() +
geom_boxplot( aes( y = chars, x = pct))
df.char.long %>%
ggplot() +
geom_boxplot( aes( y = chars, x = df.char.long[df.char.long[spam_cat] == 1]$pct))
df.char.zero %>%
pivot_longer(cols = 1:6, names_to = "chars", values_to = "pct") %>%
ggplot() +
geom_boxplot( aes( y = chars, x = pct) )
g4 <- df.char.zero %>%
pivot_longer(cols = 1:6, names_to = "chars", values_to = "pct") %>%
ggplot() +
geom_boxplot( aes( y = chars, x = pct) )
g5 <- df.char.one %>%
pivot_longer(cols = 1:6, names_to = "chars", values_to = "pct") %>%
ggplot() +
geom_boxplot( aes( y = chars, x = pct) )
(g4 / g5)
g4 <- df.char.zero %>%
pivot_longer(cols = 1:6, names_to = "chars", values_to = "pct") %>%
ggplot() +
geom_boxplot( aes( y = chars, x = pct) )
g5 <- df.char.one %>%
pivot_longer(cols = 1:6, names_to = "chars", values_to = "pct") %>%
ggplot() +
geom_boxplot( aes( y = chars, x = pct) )
(g4 / g5)
g4 <- df.char.zero %>%
pivot_longer(cols = 1:6, names_to = "chars", values_to = "pct") %>%
ggplot() +
geom_boxplot( aes( y = chars, x = pct) ) +
labs( y = "Characters in not spam emails",
x = "")
g5 <- df.char.one %>%
pivot_longer(cols = 1:6, names_to = "chars", values_to = "pct") %>%
ggplot() +
geom_boxplot( aes( y = chars, x = pct) ) +
labs( x = "Frequencies",
y = "Characters in spam emails")
(g4 / g5)
g4 <- df.char.zero %>%
pivot_longer(cols = 1:6, names_to = "chars", values_to = "pct") %>%
ggplot() +
geom_boxplot( aes( y = chars, x = pct) ) +
labs( y = "Characters in not spam emails",
x = "") +
theme_classic()
g5 <- df.char.one %>%
pivot_longer(cols = 1:6, names_to = "chars", values_to = "pct") %>%
ggplot() +
geom_boxplot( aes( y = chars, x = pct) ) +
labs( x = "Frequencies",
y = "Characters in spam emails") +
theme_classic()
(g4 / g5)
df.char.zero <- df.char %>% filter(spam_cat == 0)
df.char.one <- df.char %>% filter(spam_cat == 1)
for (var in colnames(df.char.zero[,1:6])) {
wilx <- wilcox.test(df.char.zero[[var]], df.char.one[[var]])
rbis <- sum(-1, (2 * wilx$statistic) / (length(pos.spam) * length(neg.spam)) )
cat("\nMann-Whitney U between spam and not spam on:", var,
"\np-value:", sprintf("%6.4f", wilx$p.value),
"\nr:", rbis)
}
df.char.zero <- df.char %>% filter(spam_cat == 0)
df.char.one <- df.char %>% filter(spam_cat == 1)
for (var in colnames(df.char.zero[,1:6])) {
wilx <- wilcox.test(df.char.zero[[var]], df.char.one[[var]])
rbis <- abs(sum(-1, (2 * wilx$statistic) / (length(pos.spam) * length(neg.spam)) ))
cat("\nMann-Whitney U between spam and not spam on:", var,
"\np-value:", sprintf("%6.4f", wilx$p.value),
"\nr:", rbis)
}
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest) %>%
mutate( spam_cat = ifelse(1, "is_spam", "no_spam") ) %>%
mutate_at(spam_cat, is.factor)
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate( spam_cat = ifelse(1, "is_spam", "no_spam") ) %>%
mutate( spam_cat = is.factor(spam_cat)
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate( spam_cat = ifelse(1, "is_spam", "no_spam") ) %>%
mutate( spam_cat = is.factor(spam_cat) )
View(df.model)
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate( spam_cat = replace(spam_cat, list(1 = "is_spam", 0 = "no_spam")) ) %>%
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate( spam_cat = ifelse(spam_cat == 1, "is_spam", "no_spam") ) %>%
mutate( spam_cat = is.factor(spam_cat) )
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate( spam_cat = ifelse(spam_cat == 1, "is_spam", "no_spam") ) %>%
mutate( spam_cat = is.factor(spam_cat) )
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate( spam_cat = ifelse(df$spam_cat == 1, "is_spam", "no_spam") ) %>%
mutate( spam_cat = is.factor(spam_cat) )
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate( spam_cat = is.factor(spam_cat) )
distinct(df.model$spam_cat)
table(df.model$spam_cat)
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest )
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate(spam_cat = ifelse(spam_cat == 1, "is_spam", "no_spam"))
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate(spam_cat = ifelse(spam_cat == 1, "is_spam", "no_spam")) %>%
mutate_at(spam_cat, is.factor)
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate(spam_cat = ifelse(spam_cat == 1, "is_spam", "no_spam")) %>%
mutate_at(cars(spam_cat), is.factor)
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate(spam_cat = ifelse(spam_cat == 1, "is_spam", "no_spam")) %>%
mutate_at(vars(spam_cat), is.factor)
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate(spam_cat = ifelse(spam_cat == 1, "is_spam", "no_spam")) %>%
mutate_if(is.character, as.factor)
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate(spam_cat = ifelse(spam_cat == 1, "is_spam", "no_spam")) %>%
mutate_at(vars(spam_cat), as.factor)
df.model[1:9,]
writeLines("Original set:")
prop.table( table(df$spam_cat) )
writeLines("==================")
writeLines("Train set:")
prop.table( table(train.80$spam_cat) )
n.rows <- nrow(df.model)
idx <- sample(1:nrows, size = 0.8*n.rows)
n.rows <- nrow(df.model)
idx <- sample(1:nrows, size = 0.8 * n.rows)
n.rows <- nrow(df.model)
idx <- sample(1:n.rows, size = 0.8 * n.rows)
train.80 <- df.model[idx,]
test.20 <- df.model[-idx,]
writeLines("Original set:")
prop.table( table(df$spam_cat) )
writeLines("==================")
writeLines("Train set:")
prop.table( table(train.80$spam_cat) )
writeLines("==================")
writeLines("Test set:")
prop.table( table(test.20$spam_cat) )
model.rf <- randomForest( spam_cat ~ ., data = train.80,
importance = TRUE,
ntree = 250)
colnames(df.model[,3:5]) <- c("char_freq_exclam", "char_freq_paren", "char_freq_dollar")
slice_sample(df.model, n = 9)
df.model[,3:5]
colnames(df.model[,3:5])
colnames(df.model)[,3:5] <- c("char_freq_exclam", "char_freq_paren", "char_freq_dollar")
slice_sample(df.model, n = 9)
colnames(df.model)[,3:5] <- c("char_freq_exclam", "char_freq_paren", "char_freq_dollar")
colnames(df.model)[3:5] <- c("char_freq_exclam", "char_freq_paren", "char_freq_dollar")
slice_sample(df.model, n = 9)
n.rows <- nrow(df.model)
idx <- sample(1:n.rows, size = 0.8 * n.rows)
train.80 <- df.model[idx,]
test.20 <- df.model[-idx,]
writeLines("Original set:")
prop.table( table(df$spam_cat) )
writeLines("==================")
writeLines("Train set:")
prop.table( table(train.80$spam_cat) )
writeLines("==================")
writeLines("Test set:")
prop.table( table(test.20$spam_cat) )
n.rows <- nrow(df.model)
idx <- sample(1:n.rows, size = 0.8 * n.rows)
train.80 <- df.model[idx,]
test.20 <- df.model[-idx,]
writeLines("Original set:")
prop.table( table(df$spam_cat) )
writeLines("==================")
writeLines("Train set:")
prop.table( table(train.80$spam_cat) )
writeLines("==================")
writeLines("Test set:")
prop.table( table(test.20$spam_cat) )
model.rf <- randomForest( spam_cat ~ ., data = train.80,
importance = TRUE,
ntree = 250)
plot(model.rf)
varImpPlot(model.rf)
varImpPlot(model.rf)
