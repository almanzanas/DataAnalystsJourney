library(compiler)
what.cmp <- cmpfun(what)
system.time (what.cmp (6e9))
library(parallel)
detectCores()
clust <- makeCluster(10)
clusterExport (clust, c("what", "what.cmp"))
system.time (
parSapply (clust, 1:10, function (i) what (6e9/10))
)
system.time (
parSapply(clust, 1:10, function (i) what.cmp (6e9/10))
)
?scan
getwd()
read.table ("data/addresses.csv", header = TRUE, sep = ",", quote = "",
comment.char = "", stringsAsFactors = FALSE)
read.table ("../data/addresses.csv", header = TRUE, sep = ",", quote = "",
comment.char = "", stringsAsFactors = FALSE)
read.table ("../data/addresses.csv", header = TRUE, sep = ",", quote = "",
comment.char = "", stringsAsFactors = FALSE, nrows = 1)
read.table ("../data/addresses.csv", header = F, sep = ",", quote = "",
comment.char = "", stringsAsFactors = FALSE, nrows = 1)
count.fields ("../data/addresses.csv", sep = ",", quote = "", comment.char = "")
read.table ("../data/addresses.csv", header = F, sep = ",", quote = "",
comment.char = "", stringsAsFactors = FALSE,
nrows = 1, skip = 2)
read.table ("../data/addresses.csv", header = T, sep = ",", quote = "",
comment.char = "", stringsAsFactors = FALSE, fill = T)
(
add <- read.table ("../data/addresses.csv", header = T, sep = ",", quote = "",
comment.char = "", stringsAsFactors = FALSE, fill = T)
)
# Vector with logical values:
fixc <- add$State != ""
# Paste column 2 and 3 from that rows
add[fixc, 2] <- paste (add[fixc, 2], add[fixc, 3])
# Changing the order
add[fixc, 3:4] <- add[fixc, 4:5]
add
# Saving column names and deleting State column
mycols <- colnames (add)
add$State <- NULL
add <- data.frame (ID = rownames (add), add)
colnames (add) <- mycols
# Replace old rownames:
rownames (add) <- NULL
# Removing objects:
rm (fixc, mycols)
add
(
add.scan <- scan ("~/data/addresses.csv", what = character(), sep = "\n",
quote = "", comment.char = "")
)
(
add.scan <- scan ("../data/addresses.csv", what = character(), sep = "\n",
quote = "", comment.char = "")
)
# locating all the commas:
commas <- gregexpr (",", add.scan)
# Extracting long rows:
comma.5 <- lengths (commas) == 5
# Locating the third comma:
comma.gone <- sapply (commas[comma.5], function(x) x[3])
# Replacing comma for semi-colon:
substring (add.scan[comma.5], comma.gone, comma.gone) <- ";"
add.scan
read.table (text = add.scan, header = TRUE, sep = ",", quote = "",
comment = "", stringsAsFactors = FALSE)
read.table (text = add.scan, header = TRUE, sep = ",", quote = "",
comment = "", stringsAsFactors = FALSE,
colClasses = c(ID = "character") )
readLines ("../data/addresses.csv", n = 1)
con.add <- file ("../data/addresses.csv", open = "r")
readLines (con.add, n = 2)
readLines (con.add, n = 2)
close (con.add)
install.packages("RODBC")
sqlcon <- odbcConnect (dsn="SQL2022", uid="rstats", pwd="P@ssw0rd")
library(RODBC)
sqlcon <- odbcConnect (dsn="SQL2022", uid="rstats", pwd="P@ssw0rd")
sqlcon <- odbcConnect (dsn="SQL2022", uid="rstats", pwd="P@ssw0rd")
?odbcConnect
?odbcDriverConnect
sqlcon <- odbcDriverConnect("")
sql.conn <- odbcDriverConnect(connection="{ODBC Driver 18 for SQL Server};SERVER=SQL2022;DATABASE=AdventureWorks2022;UID=rstats;PWD=P@ssw0rd;")
sql.conn <- odbcDriverConnect(connection="SERVER=SQL2022;DATABASE=AdventureWorks2022;UID=rstats;PWD=P@ssw0rd;")
sql.conn <- odbcDriverConnect(connection="DRIVER={ODBC Driver 18 for SQL Server};SERVER=SQL2022;DATABASE=AdventureWorks2022;UID=rstats;PWD=P@ssw0rd;")
sql.conn <- odbcDriverConnect(connection="DRIVER={ODBC Driver 18 for SQL Server};SERVER=SQL2022\\SQL2022;DATABASE=AdventureWorks2022;UID=rstats;PWD=P@ssw0rd;")
sql.conn <- odbcDriverConnect(connection="DRIVER={SQL Server};SERVER=192.168.1.123\\SQL2022;DATABASE=AdventureWorks2022;UID=rstats;PWD=P@ssw0rd;")
sql.conn <- odbcDriverConnect(connection="DRIVER={SQL Server};SERVER=192.168.1.123;DATABASE=AdventureWorks2022;UID=rstats;PWD=P@ssw0rd;")
connection <- odbcConnect("SQL2022")
connection <- odbcConnect("SQL2022", uid="rstats", pwd="P@ssw0rd")
sqlTables(connection)
?sqlTables
sqlTables(connection, schema = "AdventureWorks2022")
connection <- odbcConnect("SQL2022", uid="rstats", pwd="P@ssw0rd")
sqlTables(connection, schema = "%")
sqlTables(connection, tableType = "TABLE")
close(connection)
sqlTables(connection, tableType = "TABLE")
connection <- odbcConnect("SQL2022", uid="rstats", pwd="P@ssw0rd")
sqlTables(connection, tableType = "TABLE")
connection <- odbcConnect("SQL2022", uid="rstats", pwd="P@ssw0rd")
sqlTables(connection, tableType = "TABLE", scheme = "HumanResources")
connection <- odbcConnect("SQL2022", uid="rstats", pwd="P@ssw0rd")
sqlTables(connection, tableType = "TABLE", scheme = "%")
connection <- odbcConnect("SQL2022", uid="rstats", pwd="P@ssw0rd")
sqlTables(connection, scheme = "HumanResources")
sqlTables(connection, tableType = "TABLE")
odbcDriverConnect?
;
?odbcDriverConnect
sqlTables(connection, tableType = "TABLE")[2:6]
adv.tab <- sqlTables(connection, tableType = "TABLE")
adv.tab[2:6]
adv.tab[2:6,]
adv.tab[4:8,]
sqlColumns(connection, "JobCandidate")[3:10,]
sqlColumns(connection, "Employee")[3:10,]
sqlColumns(connection, "Employee")[3:10,4:]
sqlColumns(connection, "Employee")[3:10,4::]
sqlColumns(connection, "Employee")[3:10,4:ncol(sqlColumns(connection, "Employee"))]
emp <- sqlQuery (connection, "
SELECT * FROM Employee
")
emp
?sqlQuery
emp <- sqlQuery (connection, "
SELECT * FROM Employee.AdventureWorks2022
")
emp
emp <- sqlQuery (connection, "
SELECT * FROM AdventureWorks2022.Employee
")
emp
emp <- sqlQuery (connection, "
SELECT * FROM HumanResources.Employee
")
emp
?sample
sample(emp, 8)
sample(emp, c(8,))
sample(emp)
s10 <- sample(nrow(emp), 10)
emp[s10,]
emp.fem <- sqlQuery (connection, "
SELECT * FROM HumanResources.Employee
WHERE Gender == F
", stringAsFactors = FALSE)
emp.fem
emp.fem <- sqlQuery (connection, "
SELECT * FROM HumanResources.Employee
WHERE Gender = F
", stringAsFactors = FALSE)
emp.fem
emp.fem <- sqlQuery (connection, "
SELECT * FROM HumanResources.Employee
WHERE Gender = 'F'
", stringAsFactors = FALSE)
emp.fem <- sqlQuery (connection, "
SELECT * FROM HumanResources.Employee
WHERE Gender == 'F'
", stringAsFactors = FALSE)
emp.fem
emp.mal <- sqlQuery (connection, "
SELECT BusinessEntityID, LoginID, VacationHours, SickLeaveHours
FROM HumanResources.Employee
", stringAsFactors = FALSE)
emp.mal <- sqlQuery (connection, "
SELECT BusinessEntityID, LoginID, VacationHours, SickLeaveHours
FROM HumanResources.Employee
", stringsAsFactors = FALSE)
emp.mal
emp.mal <- sqlQuery (connection, "
SELECT BusinessEntityID, LoginID, VacationHours, SickLeaveHours
FROM HumanResources.Employee
WHERE Gender = M
", stringsAsFactors = FALSE)
emp.mal
emp.mal <- sqlQuery (connection, "
SELECT BusinessEntityID, LoginID, VacationHours, SickLeaveHours
FROM HumanResources.Employee
WHERE Gender = 'M'
", stringsAsFactors = FALSE)
emp.mal
emp.mal <- sqlQuery (connection, "
SELECT BusinessEntityID, LoginID, VacationHours, SickLeaveHours
FROM HumanResources.Employee
WHERE Gender = 'F'
", stringsAsFactors = FALSE)
emp.mal
emp.mal <- sqlQuery (connection, "
SELECT BusinessEntityID, LoginID, VacationHours, SickLeaveHours
FROM HumanResources.Employee
WHERE Gender = 'M'
", stringsAsFactors = FALSE)
emp.mal
emp.mal <- sqlQuery (connection, "
SELECT BusinessEntityID, LoginID, VacationHours, SickLeaveHours
FROM HumanResources.Employee
WHERE Gender = 'M'
", stringsAsFactors = FALSE)
s10 <- sample(nrow(emp.mal), 10)
emp.mal[s10,]
emp.sales <- sqlQuery (connection, "
SELECT *
FROM Sales.SalesPerson
LEFT JOIN HumanResources.Employee
ON BusinessEntityID
", stringsAsFactors = FALSE)
s10 <- sample(nrow(emp.sales), 10)
emp.sales <- sqlQuery (connection, "
SELECT *
FROM Sales.SalesPerson
LEFT JOIN HumanResources.Employee
ON Sales.SalesPerson.BusinessEntityID = HumanResources.Employee.BusinessEntityID
", stringsAsFactors = FALSE)
s10 <- sample(nrow(emp.sales), 10)
emp.sales
emp.sales <- sqlQuery (connection, "
SELECT *
FROM Sales.SalesPerson
LEFT JOIN HumanResources.Employee
ON Sales.SalesPerson.BusinessEntityID = HumanResources.Employee.BusinessEntityID
", stringsAsFactors = FALSE)
# s10 <- sample(nrow(emp.sales), 10)
emp.sales
?sqlGetResults
sqlFetch(connection, "Sales.Customer")
?sqlFetch
sqlFetch(connection, "Sales.Customer", max(10))
sqlFetch(connection, "Sales.Customer", max = 10)
sqlFetchMore(connection, max = 10)
close(connection)
list.files(pattern = "^babyname*")
?list.files
list.files(pattern = "^babyname*", recursive = TRUE, full.names = TRUE)
list.files(pattern = "^babyname", recursive = TRUE, full.names = TRUE)
list.files(pattern = "^baby*$", recursive = TRUE, full.names = TRUE)
list.files(path = "~/" , pattern = "^baby*$", recursive = TRUE, full.names = TRUE)
path.expand("~")
list.files(path = getwd() , pattern = "^baby*$", recursive = TRUE, full.names = TRUE)
getwd()
list.files(path = getwd() ,
#pattern = "^baby*$", r
ecursive = TRUE, full.names = TRUE)
list.files(path = getwd() ,
#pattern = "^baby*$", r
recursive = TRUE, full.names = TRUE)
list.files(path = getwd() ,
#pattern = "^baby*$",
recursive = TRUE, full.names = F)
list.files(path = "../" ,
#pattern = "^baby*$",
recursive = TRUE, full.names = F)
list.files(path = "../" ,
pattern = "^baby*$",
recursive = TRUE, full.names = F)
list.files(path = "../" ,
pattern = "^baby*",
recursive = TRUE, full.names = F)
getwd()
unzip("../data/babynames/babynames-1950.zip", list = TRUE)
# listing files corresponding with babynames data
list.files(path = "../" ,
pattern = "^baby*\\.zip$",
recursive = TRUE, full.names = F)
# listing files corresponding with babynames data
list.files(path = "../" ,
pattern = "^baby**\\.zip$",
recursive = TRUE, full.names = F)
# listing files corresponding with babynames data
list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = F)
?unz
dat.txt <- unz(filename = "../data/babynames/babynames-1950.zip", open = "r")
dat.txt <- unz("bn1950", filename = "../data/babynames/babynames-1950.zip", open = "r")
dat.txt <- unz("../data/babynames/babynames-1950.zip", filename = "../data/babynames/babynames-1950.zip", open = "r")
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
dat.txt <- unz("../data/babynames/babynames-1950.zip", filename = "yob1953.txt", open = "r")
dat.txt
test <- data.frame (dat.txt)
?unzip
remove(test)
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
for (f in 1:length(zipfiles)) {
unzip (zipfiles[f])
}
txtfiles <- list.files(path = "../",
pattern = "^yob[1-9]{4}\\.txt$",
recursive = TRUE, full.names = TRUE)
txtfiles
txtfiles <- sub ("../notebooks/", "", txtfiles)
txtfiles
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
for (f in 1:length(zipfiles)) {
unzip (zipfiles[f])
}
txtfiles <- list.files(path = "../",
pattern = "^yob[1-9]{4}\\.txt$",
recursive = TRUE, full.names = TRUE)
txtnames <- sub ("../notebooks/", "", txtfiles)
yr <- substring (txtnames, 4, 7)
result <- NULL
for (i in 1:length (txtfiles) ) {
dat <- data.frame (Year = yr[1], read.delim (txtfiles, stringAsFactor=FALSE))
result <- rbind (result, dat)
}
for (i in 1:length (txtfiles) ) {
dat <- data.frame (Year = yr[1], read.delim (txtfiles, stringsAsFactor=FALSE))
result <- rbind (result, dat)
}
?read.delim
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
for (f in 1:length(zipfiles)) {
unzip (zipfiles[f])
}
txtfiles <- list.files(path = "../",
pattern = "^yob[1-9]{4}\\.txt$",
recursive = TRUE, full.names = TRUE)
txtnames <- sub ("../notebooks/", "", txtfiles)
yr <- substring (txtnames, 4, 7)
result <- NULL
for (i in 1:length (txtfiles) ) {
dat <- data.frame (Year = yr[1], read.csv (txtfiles,
header = FALSE,
stringsAsFactor=FALSE))
result <- rbind (result, dat)
}
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
for (f in 1:length(zipfiles)) {
unzip (zipfiles[f])
}
txtfiles <- list.files(path = "../",
pattern = "^yob[1-9]{4}\\.txt$",
recursive = TRUE, full.names = TRUE)
txtnames <- sub ("../notebooks/", "", txtfiles)
yr <- substring (txtnames, 4, 7)
result <- NULL
for (i in 1:length (txtfiles) ) {
dat <- data.frame (Year = yr[1], read.csv (txtfiles[i],
header = FALSE,
stringsAsFactor=FALSE))
result <- rbind (result, dat)
}
result
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
for (f in 1:length(zipfiles)) {
unzip (zipfiles[f])
}
txtfiles <- list.files(path = "../",
pattern = "^yob[1-9]{4}\\.txt$",
recursive = TRUE, full.names = TRUE)
txtnames <- sub ("../notebooks/", "", txtfiles)
yr <- substring (txtnames, 4, 7)
result <- NULL
for (i in 1:length (txtfiles) ) {
dat <- data.frame (Year = yr[1], read.csv (txtfiles[i],
header = c("Name", "Sex", "Count"),
stringsAsFactor=FALSE))
result <- rbind (result, dat)
}
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
for (f in 1:length(zipfiles)) {
unzip (zipfiles[f])
}
txtfiles <- list.files(path = "../",
pattern = "^yob[1-9]{4}\\.txt$",
recursive = TRUE, full.names = TRUE)
txtnames <- sub ("../notebooks/", "", txtfiles)
yr <- substring (txtnames, 4, 7)
result <- NULL
for (i in 1:length (txtfiles) ) {
dat <- data.frame (Year = yr[1], read.csv (txtfiles[i],
header = FALSE,
stringsAsFactor=FALSE))
result <- rbind (result, dat)
}
result[1:10]
result[1:10,]
nrow (result)
colnames(result) <- c("Year", "Name", "Sex", "Count")
# cleaning exported files
file.remove(txtfiles)
sample (nrow(result), 10) |> result[]
s10 <- sample (nrow(result), 10)
result[s10]
result[s10,]
nrow (result)
?file.remove
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
for (f in 1:length(zipfiles)) {
unzip (zipfiles[f])
}
txtfiles <- list.files(path = "../",
pattern = "^yob.*\\.txt$",
recursive = TRUE, full.names = TRUE)
txtnames <- sub ("../notebooks/", "", txtfiles)
yr <- substring (txtnames, 4, 7)
result <- NULL
for (i in 1:length (txtfiles) ) {
dat <- data.frame (Year = yr[1], read.csv (txtfiles[i],
header = FALSE,
stringsAsFactor=FALSE))
result <- rbind (result, dat)
}
result
yr
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
for (f in 1:length(zipfiles)) {
unzip (zipfiles[f])
}
txtfiles <- list.files(path = "../",
pattern = "^yob.*\\.txt$",
recursive = TRUE, full.names = TRUE)
txtnames <- sub ("../notebooks/", "", txtfiles)
yr <- substring (txtnames, 4, 7)
result <- NULL
for (i in 1:length (txtfiles) ) {
dat <- data.frame (Year = yr[i], read.csv (txtfiles[i],
header = FALSE,
stringsAsFactor=FALSE))
result <- rbind (result, dat)
}
result
s10 <- sample (nrow(result), 10)
result[s10,]
s10 <- sample (nrow(result), 10)
result[s10,]
colnames(result) <- c("Year", "Name", "Sex", "Count")
# cleaning exported files
file.remove(txtfiles)
result[s10,]
colnames(result) <- c("Year", "Name", "Sex", "Count")
# cleaning exported files
rem <- file.remove(txtfiles, )
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
for (f in 1:length(zipfiles)) {
unzip (zipfiles[f])
}
txtfiles <- list.files(path = "../",
pattern = "^yob.*\\.txt$",
recursive = TRUE, full.names = TRUE)
txtnames <- sub ("../notebooks/", "", txtfiles)
yr <- substring (txtnames, 4, 7)
result <- NULL
for (i in 1:length (txtfiles) ) {
dat <- data.frame (Year = yr[i], read.csv (txtfiles[i],
header = FALSE,
stringsAsFactor=FALSE))
result <- rbind (result, dat)
}
s10 <- sample (nrow(result), 10)
result[s10,]
colnames(result) <- c("Year", "Name", "Sex", "Count")
# cleaning exported files
rem <- file.remove(txtfiles, )
# cleaning exported files
rem <- file.remove(txtfiles)
remove(rem)
result[s10,]
survey
survey <- data.frame(
ID = c("AA", "AA", "CC", "CC", "CC", "DD", "EE"),
Date = as.Date(c("2012-09-26", "2014-01-16", "2013-03-13", "2014-04-30",
"2015-03-31", "2013-06-03", "2013-12-02")),
Response = c(3, 4, 3, 5, 4, 2, 4)
)
survey
survey <- data.frame(
ID = c("AA", "AA", "CC", "CC", "CC", "DD", "EE"),
Date = as.Date(c("2012-09-26", "2014-01-16", "2013-03-13", "2014-04-30",
"2015-03-31", "2013-06-03", "2013-12-02")),
Response = c(3, 4, 3, 5, 4, 2, 4)
)
survey
with (survey, tapply(Response, ID, mean))
rle.survey <- rle (sort(survey$ID) )
rle.survey
unique(survey)
survey |> unique(ID) |> which()
survey[which(unique(survey$ID))]
survey[which(unique(survey$ID)),]
which(unique(survey$ID))
sapply(survey$Date, max)
sapply(as.character(survey$Date), max)
lapply(as.character(survey$Date), max)
library(help = "datasets")
install.packages("cleaningBook")
install.packages("Rtools")
