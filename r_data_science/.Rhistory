a[1,2]
cat("\n")
a[-2,]
cat("\nObtaining row 4 and 2, and cols 3 and 1, in that order: \n")
a[c(4,2), c(3,1)]
c(a)
cat("\n")
t(a)
cat("\n")
c(t(a))
a[,2]
cat("\n")
a[,2, drop=FALSE]
year <- rep (2015:2017, each = 5)
market <- c(2, 2, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3, 2, 3, 2)
(tbl <- table (market, year))
cat("\nCollaing to colnames(): \n")
colnames(tbl)
cat("\nAssigning new names to columns: \n")
colnames(tbl) <- c("Y15", "Y16", "Y17")
tbl
tbl[,"Y15"]
cat("\n")
tbl["3",]
a
cat("\n")
rowSums(a)
cat("\n")
apply(a, 1, sum, na.rm=TRUE)
cat("\n")
apply(a, 1, function (x) sum (x))
apply(a, 2, range)
cat("\n")
t( apply(a, 1, range) )
cat("Getting elements location where the value is greater than 109:\n")
apply(a, 2, function (x) which (x > 109))
a <- matrix(101:115, 5, 3); a[5, 3] <- a[3, 1] <- NA
a
cat("\nSum of NA in each column: \n")
apply(a, 2, function (x) sum (is.na(x)))
which(is.na(a))
cat("\n")
which(is.na(a), arr.ind=TRUE)
b <- matrix (1:20, nrow=4, byrow=T)
b <- cbind(b, c(3, 2, 0, 5))
colnames(b) <- c("P1", "P2", "P3", "P4", "P5", "Use")
rownames(b) <- c("Spring", "Summer", "Fall", "Winter")
b
(filt <- cbind(1:nrow(b), b[, "Use"]) )
cat("\n")
b[filt]
who <- rep( c("Mery", "Kelly"), c(2, 6))
when <- rep( c("AM", "PM"), 4)
worked <- c(T, T, F, T, F, T, F, T)
sch <- table(who, when, worked)
sch
ali <- list( alpha = 1:4, beta = "yes", delta = log, 69)
ali
age <- c(31, 33, 42, 54, 65, 74, 24)
gender <- c("F", "M", "F", "M", "M", "F", "F")
cat("Split age by gender:\n")
split(age, gender)
cat("\nSplit ages when age is greater than 60\n")
split(age, age > 60)
length( split(age, gender) )
cat("\nLengths: \n")
lengths( split(age, gender) )
str(ali)
cat("\n")
class(ali)
cat("Extracting the content of element 4 as a vector: \n")
ali[[4]]
cat("\nExtracting the element 1 as a list: \n")
ali[1]
cat("\nExtracting inside alpha the elements 2 and 4: \n")
ali$alpha[c(F, T, F, T)]
ali$a
cat("\n")
ali$de
ali$delta <- c(T, F, F, T)
str(ali)
ali$beta <- NULL
str(ali)
unlist(ali)
b
cat("\n")
dimnames(b)
dimnames(b)[[1]][3] <- "Autumn"
cat("\n")
b
names(options())[3:15]
df <- data.frame (
Who = letters[1:5],
Cost = c(3, 2, 11, 4, 0),
Paid = c(F, T, F, T, T),
stringsAsFactors=FALSE
)
row.names(df) <- as.character (row.names(df))
df
df[4,]
f <- df$Paid
df[f,]
df[(df["Paid"] == F),]
df["Cost"]
df[[2]]
cat("\n")
df[["Cost"]]
cat("\n")
df[["Co", exact=FALSE]]
df[, c("Who", "Paid")]
df[, "Who"]
df[, "Who", drop=FALSE]
sapply (df, class)
df2 <- data.frame (
Age = c(35, 24, 42, 63, 56, 66),
Spouse = c(31, 36, 40, 59, 60, 60),
Gender = c("F", "F", "M", "F", "M", "M")
)
split (df2$Age, df2$Gender)
cat("\nUsing sapply() to obtain the mean by gender :\n")
sapply (split (df2$Age, df2$Gender), mean)
round( tapply(df2$Age, df2$Gender, mean), 3 )
split (df2, df2$Gender)
cat("\nSummary differencing Gender: \n")
lapply ( split (df2, df2$Gender), summary )
cat("\nLet's see what happens with sapply: \n")
sapply ( split (df2, df2$Gender), summary )
by ( df2, df2$Gender, summary )
subset ( df, Paid == TRUE)
# Is the alternative to:
df[ df$Paid == TRUE, ]
?transform
cat("Nested: \n")
cos (log (sqrt (8 - 3) ) )
cat("\nUsing pipes: \n")
(8 - 3) %>% sqrt %>% log %>% cos
install.packages("magrittr")
cat("Nested: \n")
cos (log (sqrt (8 - 3) ) )
library("magrittr")
cat("\nUsing pipes: \n")
(8 - 3) %>% sqrt %>% log %>% cos
cat("Nested: \n")
cos (log (sqrt (8 - 3) ) )
library("magrittr")
cat("\nUsing pipes: \n")
(8 - 3) %>% sqrt %>% log %>% cos
cat("\nBuilt in pipes |> : \n")
(8 - 3) |> sqrt |> log |> cos
cat("Nested: \n")
cos (log (sqrt (8 - 3) ) )
library("magrittr")
cat("\nUsing pipes: \n")
(8 - 3) %>% sqrt %>% log %>% cos
cat("\nBuilt in pipes |> : \n")
(8 - 3) |> sqrt() |> log |> cos
cat("Nested: \n")
cos (log (sqrt (8 - 3) ) )
library("magrittr")
cat("\nUsing pipes: \n")
(8 - 3) %>% sqrt %>% log %>% cos
help(|>)
help("|>")
# First '0' will be converted into origin date.
dd <- as.Date ( c(0, 18250:18253), origin = "1970-01-01" )
# First '0' will be converted into origin date.
dd <- as.Date ( c(0, 18250:18253), origin = "1970-01-01" )
dd
# First '0' will be converted into origin date.
dd <- as.Date ( c(0, 18251:18255), origin = "1970-01-01" )
dd
# First '0' will be converted into origin date.
dd <- as.Date ( c(0, 18252:18255), origin = "1970-01-01" )
dd
?as.Date
?strptime
as.Date ( c("Feb 29, 2016", "Feb 29, 2017"), format = "%b %d, %Y" )
as.Date ( c("Feb 29, 2016", "Feb 29, 2017", "September 30, 2017"),
format = "%b %d, %Y" )
Sys.getlocale()
sp.dt <- c("3 octubre 2016", "26 Marzo 2017")
( dts <- as.Date (sp.dt, format = "%d %B %Y") )
# Changing locales to spanish:
Sys.setlocale ("LC_TIME", "Spanish")
( dts <- as.Date (sp.dt, format = "%d %B %Y") )
# Changing back:
Sys.setlocale ("LC_TIME", "UK")
# Using as.character() to get english dates:
as.character (dts, "%d %B %Y")
sp.dt <- c("3 octubre 2016", "26 Marzo 2017")
( dts <- as.Date (sp.dt, format = "%d %B %Y") )
# Changing locales to spanish:
Sys.setlocale ("LC_TIME", "Spanish")
( dts <- as.Date (sp.dt, format = "%d %B %Y") )
# Changing back:
Sys.setlocale ("LC_TIME", "UK")
dt1 <- as.Date ("2024/05/17")
dt2 <- as.Date ("2024-07-03")
# Extracting weekdays:
weekdays( c(dt1, dt2) )
cat("\n")
# Extracting month name:
months( c(dt1, dt2), abbreviate = T )
cat("\n")
# Identifying Quarters:
quarters( c(dt1, dt2) )
cat("\n")
format ( c(dt1, dt2), "%y")
format ( c(dt1, dt2), "%d")
format ( c(dt1, dt2), "%A, %B %d, %Y")
cat(dt1, "plus 30: \n")
dt1 + 30
cat("\nDifference between date1 and date2: \n")
(dd <- dt2 - dt1)
cat("\n")
as.numeric (dd)
units(dd)
cat("\nTo numeric but in weeks: \n")
as.numeric (dd, units="weeks")
cat("Date1 adding 30 days: \n")
dt1 + 30
cat("\nDifference between date1 and date2: \n")
(dd <- dt2 - dt1)
cat("\n")
as.numeric (dd)
units(dd)
cat("\nTo numeric but in weeks: \n")
as.numeric (dd, units="weeks")
cat("Date1 adding 30 days: \n")
dt1 + 30
cat("\nDifference between date1 and date2: \n")
(dd <- dt2 - dt1)
cat("\nDifference to numeric: \n")
as.numeric (dd)
units(dd)
cat("\nTo numeric but in weeks: \n")
as.numeric (dd, units="weeks")
(ready <- as.POSIXlt("2017-01-17 14:51:23"))
cat("\n")
unlist (ready)
cat("\n")
as.numeric(ready["mday"])
(ready <- as.POSIXlt("2017-01-17 14:51:23"))
cat("\n")
unlist (ready)
cat("\n")
ready["mday"]
(ready <- as.POSIXlt("2017-01-17 14:51:23"))
cat("\n")
unlist (ready)
cat("\n")
ready
(ready <- as.POSIXlt("2017-01-17 14:51:23"))
cat("\n")
unlist (ready)
cat("\n")
unlist (ready)["mday"]
(ready <- as.POSIXlt("2017-01-17 14:51:23"))
cat("\n")
unlist (ready)
cat("\n")
( mdayn <- as.numeric(unlist (ready)["mday"]) )
( ct1 <- as.POSIXct ("Mar 31, 2017 10:26:08 pm",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-04-01 05:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("Mar 31, 2017 10:26:08 pm",
format = "%b %d, %Y %I:%M:%S %p", tz = "PDT") )
cat("\n")
(ct2 <- as.POSIXct ("2017-04-01 05:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("Mar 31, 2017 10:26:08 pm",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-04-01 05:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("Mar 31, 2017 10:26:08 pm",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-04-01 01:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("Mar 31, 2017 11:26:08 pm",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-31 10:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("Mar 31, 2017 11:26:08 pm",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-31 22:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("Mar 31, 2017 11:26:08 pm",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-31 21:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
c(ct1, ct2)
cat("\n")
weekdays(c(ct1, ct2))
cat("\n")
weekdays(ct2)
( ct1 <- as.POSIXct ("Jun 1, 2017 00:26:08 pm",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-31 22:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("Jun 01, 2017 00:26:08 pm",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-31 22:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("June 01, 2017 00:26:08 pm",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-31 22:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("June 01, 2017 00:26:08 pm",
format = "%B %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-31 22:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("Jun 1, 2017 00:26:08 am",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-31 22:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("June 1, 2017 00:26:08 am",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-31 22:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("June 01, 2017 00:26:08 am",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-31 22:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("Apr 1, 2017 00:26:08 am",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-31 22:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("April 1, 2017 00:26:08 am",
format = "%B %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-31 22:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("April 01, 2017 00:26:08 am",
format = "%B %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-31 22:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("Mar 30, 2017 00:26:08 am",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-29 21:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("Mar 30, 2017 12:26:08 am",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-29 21:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
( ct1 <- as.POSIXct ("Mar 30, 2017 12:26:08 am",
format = "%b %d, %Y %I:%M:%S %p") )
cat("\n")
(ct2 <- as.POSIXct ("2017-03-29 22:26:08", tz = "UTC"))
cat("\nLooking for diferences: \n")
as.numeric (ct1 - ct2, units = "secs")
c(ct1, ct2)
cat("\n")
weekdays(c(ct1, ct2))
cat("\n")
weekdays(ct2)
gc()
as.date(ct2)
as.Date(ct2)
as.Date(ct2)
as.Date(ct1)
(crdt <- date() )
cat("\n")
(now <- as.POSIXct (crdt, format = "%A %B %d %H:%M:%S %Y" ) )
cat("\n")
as.Date (now)
diff ( range( c(ct1, ct2) ) )
seq ( as.Date("2020-03-11"), by = 3, length = 5 )
cat("\n")
pdt <- as.POSIXct( ("2020-03-11" 13:05:00) )
seq ( as.Date("2020-03-11"), by = 3, length = 5 )
cat("\n")
pdt <- as.POSIXct( ("2020-03-11 13:05:00") )
seq ( pdt, by = 2, length = 3)
cat("\nSequence by days:\n")
seq (pdt, by = "day", length = 3)
cat("\nBy day without altering the hour: \n")
seq (pdt, by = "DSTday", length = 3)
d1 <- as.POSIXct ("2017-05-01 12:00:00")
d2 <- as.POSIXct ("2017-05-01 12:00:06")
d3 <- as.POSIXct ("2017-05-07 12:00:00")
cat("Are equal (d2 - d1) and (d3 - d1) ? :\n")
(d2 - d1) == (d3 - d1)
cat("\nSame operation but using as.numeric() : \n")
as.numeric(d2 - d1) == as.numeric(d3 - d1)
cat("\nSame as.numeric but with units=days:\n")
as.numeric(d2 - d1, units="days") == as.numeric(d3 - d1, units="days")
c(d1, NA)
cat("\n")
c(NA, d1)
cat("\n")
c( as.Date(NA), d1)
cat("\n")
c( as.POSIXct(NA), d1)
dt.df <- data.frame(
Start = as.Date ( c(seq ("2020-05-03", by="months", length = 6) ) )
)
dt.df <- data.frame(
Start = c( seq (as.Date("2020-05-03"), by="months", length = 6) ) )
)
dt.df <- data.frame(
Start = c( seq (as.Date("2020-05-03"), by="months", length = 6) )
)
# Creating a new column
dt.df$End <- c( seq (as.Date("2021-06-02"), by="months", length = 6) ) )
dt.df <- data.frame(
Start = c( seq (as.Date("2020-05-03"), by="months", length = 6) )
)
# Creating a new column
dt.df$End <- c( seq (as.Date("2021-06-02"), by="months", length = 6) )
dt.df
sapply ( nrow(dt.df),
function (i) as.numeric (dt.df[i,2] - dt.df[i,1],
units = "days") )
sapply ( 1:nrow(dt.df),
function (i) as.numeric (dt.df[i,2] - dt.df[i,1],
units = "days") )
(
c(d1, NA)
cat("\n")
c(d1, NA)
cat("\n")
c(NA, d1)
cat("\n")
c( as.Date(NA), d1)
cat("\n")
c( as.POSIXct(NA), d1)
c(d1, NA)
cat("\n")
c(NA, d1)
cat("\n")
c( as.Date(NA), d1)
cat("\n")
c( as.POSIXct(NA), d1)
?intersection
intersection( names(df), names(df2) )
intersect( names(df), names(df2) )
names(df)
names(df2)
intersect( names(df), names(df2) )
names(df)
names(df2)
df2$Paid <- c(NA,NA,NA,NA,NA)
names(df)
names(df2)
df2$Paid <- c(NA,NA,NA,NA,NA,NA)
intersect( names(df), names(df2) )
View(df)
edit(df)
data.entry(df)
df2$Paid <- 101:106
df2&Date <- rep (as.Date ("2024-02-05"), by="months", length=6)
df2$Date <- rep (as.Date ("2024-02-05"), by="months", length=6)
df2
( col.cls <- sapply(df2, function (x) class (x)[1] ) )
table(col.cls)
df2$Spouse[3] <- NA
df2$Paid[5] <- NA
df2$Paid[6] <- NA
df2$Date[2] <- NA
df2$Age[4] <- -56
sapply( df2, function(x) sum(is.na(x) ) )
sapply( df2, function(x) sum(is.na(x) ) ) |> table()
sapply( df2, function (x) sum (x < 0, na.rm = TRUE) )
sapply (df2[, match(col.cls, c("numeric", "integer") ) ], c(range, mean, median, sd) )
sapply (df2[, match(col.cls, c("numeric", "integer") ) ], function(x) %in% c(range(x), mean(x), median(x), sd(x) ) )
sapply (df2[, match(col.cls, c("numeric", "integer") ) ], function(x) c(range(x), mean(x), median(x), sd(x) ) )
sapply (df2[, match(col.cls, c("numeric", "integer") ) ], range ) )
sapply (df2[, match(col.cls, c("numeric", "integer") ) ], range )
sapply (df2[, col.cls %in% c("numeric", "integer") ], range )
sapply (df2[, col.cls %in% c("numeric", "integer"), na.rm=TRUE ], range )
sapply (df2[, col.cls %in% c("numeric", "integer") ], range, na.rm=TRUE )
sapply (df2[, col.cls %in% c("numeric", "integer") ], range, mean, na.rm=TRUE )
sapply (df2[, col.cls %in% c("numeric", "integer") ], list(mean, range), na.rm=TRUE )
sapply (df2[, col.cls %in% c("numeric", "integer") ], range, na.rm=TRUE )
sapply(df2, function(x) length(unique(na.omit(x) ) ) )
