path.expand("~")
list.files(path = getwd() , pattern = "^baby*$", recursive = TRUE, full.names = TRUE)
getwd()
list.files(path = getwd() ,
#pattern = "^baby*$", r
ecursive = TRUE, full.names = TRUE)
list.files(path = getwd() ,
#pattern = "^baby*$", r
recursive = TRUE, full.names = TRUE)
list.files(path = getwd() ,
#pattern = "^baby*$",
recursive = TRUE, full.names = F)
list.files(path = "../" ,
#pattern = "^baby*$",
recursive = TRUE, full.names = F)
list.files(path = "../" ,
pattern = "^baby*$",
recursive = TRUE, full.names = F)
list.files(path = "../" ,
pattern = "^baby*",
recursive = TRUE, full.names = F)
getwd()
unzip("../data/babynames/babynames-1950.zip", list = TRUE)
# listing files corresponding with babynames data
list.files(path = "../" ,
pattern = "^baby*\\.zip$",
recursive = TRUE, full.names = F)
# listing files corresponding with babynames data
list.files(path = "../" ,
pattern = "^baby**\\.zip$",
recursive = TRUE, full.names = F)
# listing files corresponding with babynames data
list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = F)
?unz
dat.txt <- unz(filename = "../data/babynames/babynames-1950.zip", open = "r")
dat.txt <- unz("bn1950", filename = "../data/babynames/babynames-1950.zip", open = "r")
dat.txt <- unz("../data/babynames/babynames-1950.zip", filename = "../data/babynames/babynames-1950.zip", open = "r")
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
dat.txt <- unz("../data/babynames/babynames-1950.zip", filename = "yob1953.txt", open = "r")
dat.txt
test <- data.frame (dat.txt)
?unzip
remove(test)
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
for (f in 1:length(zipfiles)) {
unzip (zipfiles[f])
}
txtfiles <- list.files(path = "../",
pattern = "^yob[1-9]{4}\\.txt$",
recursive = TRUE, full.names = TRUE)
txtfiles
txtfiles <- sub ("../notebooks/", "", txtfiles)
txtfiles
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
for (f in 1:length(zipfiles)) {
unzip (zipfiles[f])
}
txtfiles <- list.files(path = "../",
pattern = "^yob[1-9]{4}\\.txt$",
recursive = TRUE, full.names = TRUE)
txtnames <- sub ("../notebooks/", "", txtfiles)
yr <- substring (txtnames, 4, 7)
result <- NULL
for (i in 1:length (txtfiles) ) {
dat <- data.frame (Year = yr[1], read.delim (txtfiles, stringAsFactor=FALSE))
result <- rbind (result, dat)
}
for (i in 1:length (txtfiles) ) {
dat <- data.frame (Year = yr[1], read.delim (txtfiles, stringsAsFactor=FALSE))
result <- rbind (result, dat)
}
?read.delim
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
for (f in 1:length(zipfiles)) {
unzip (zipfiles[f])
}
txtfiles <- list.files(path = "../",
pattern = "^yob[1-9]{4}\\.txt$",
recursive = TRUE, full.names = TRUE)
txtnames <- sub ("../notebooks/", "", txtfiles)
yr <- substring (txtnames, 4, 7)
result <- NULL
for (i in 1:length (txtfiles) ) {
dat <- data.frame (Year = yr[1], read.csv (txtfiles,
header = FALSE,
stringsAsFactor=FALSE))
result <- rbind (result, dat)
}
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
for (f in 1:length(zipfiles)) {
unzip (zipfiles[f])
}
txtfiles <- list.files(path = "../",
pattern = "^yob[1-9]{4}\\.txt$",
recursive = TRUE, full.names = TRUE)
txtnames <- sub ("../notebooks/", "", txtfiles)
yr <- substring (txtnames, 4, 7)
result <- NULL
for (i in 1:length (txtfiles) ) {
dat <- data.frame (Year = yr[1], read.csv (txtfiles[i],
header = FALSE,
stringsAsFactor=FALSE))
result <- rbind (result, dat)
}
result
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
for (f in 1:length(zipfiles)) {
unzip (zipfiles[f])
}
txtfiles <- list.files(path = "../",
pattern = "^yob[1-9]{4}\\.txt$",
recursive = TRUE, full.names = TRUE)
txtnames <- sub ("../notebooks/", "", txtfiles)
yr <- substring (txtnames, 4, 7)
result <- NULL
for (i in 1:length (txtfiles) ) {
dat <- data.frame (Year = yr[1], read.csv (txtfiles[i],
header = c("Name", "Sex", "Count"),
stringsAsFactor=FALSE))
result <- rbind (result, dat)
}
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
for (f in 1:length(zipfiles)) {
unzip (zipfiles[f])
}
txtfiles <- list.files(path = "../",
pattern = "^yob[1-9]{4}\\.txt$",
recursive = TRUE, full.names = TRUE)
txtnames <- sub ("../notebooks/", "", txtfiles)
yr <- substring (txtnames, 4, 7)
result <- NULL
for (i in 1:length (txtfiles) ) {
dat <- data.frame (Year = yr[1], read.csv (txtfiles[i],
header = FALSE,
stringsAsFactor=FALSE))
result <- rbind (result, dat)
}
result[1:10]
result[1:10,]
nrow (result)
colnames(result) <- c("Year", "Name", "Sex", "Count")
# cleaning exported files
file.remove(txtfiles)
sample (nrow(result), 10) |> result[]
s10 <- sample (nrow(result), 10)
result[s10]
result[s10,]
nrow (result)
?file.remove
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
for (f in 1:length(zipfiles)) {
unzip (zipfiles[f])
}
txtfiles <- list.files(path = "../",
pattern = "^yob.*\\.txt$",
recursive = TRUE, full.names = TRUE)
txtnames <- sub ("../notebooks/", "", txtfiles)
yr <- substring (txtnames, 4, 7)
result <- NULL
for (i in 1:length (txtfiles) ) {
dat <- data.frame (Year = yr[1], read.csv (txtfiles[i],
header = FALSE,
stringsAsFactor=FALSE))
result <- rbind (result, dat)
}
result
yr
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
for (f in 1:length(zipfiles)) {
unzip (zipfiles[f])
}
txtfiles <- list.files(path = "../",
pattern = "^yob.*\\.txt$",
recursive = TRUE, full.names = TRUE)
txtnames <- sub ("../notebooks/", "", txtfiles)
yr <- substring (txtnames, 4, 7)
result <- NULL
for (i in 1:length (txtfiles) ) {
dat <- data.frame (Year = yr[i], read.csv (txtfiles[i],
header = FALSE,
stringsAsFactor=FALSE))
result <- rbind (result, dat)
}
result
s10 <- sample (nrow(result), 10)
result[s10,]
s10 <- sample (nrow(result), 10)
result[s10,]
colnames(result) <- c("Year", "Name", "Sex", "Count")
# cleaning exported files
file.remove(txtfiles)
result[s10,]
colnames(result) <- c("Year", "Name", "Sex", "Count")
# cleaning exported files
rem <- file.remove(txtfiles, )
zipfiles <- list.files(path = "../" ,
pattern = "^babynames.*\\.zip$",
recursive = TRUE, full.names = T)
for (f in 1:length(zipfiles)) {
unzip (zipfiles[f])
}
txtfiles <- list.files(path = "../",
pattern = "^yob.*\\.txt$",
recursive = TRUE, full.names = TRUE)
txtnames <- sub ("../notebooks/", "", txtfiles)
yr <- substring (txtnames, 4, 7)
result <- NULL
for (i in 1:length (txtfiles) ) {
dat <- data.frame (Year = yr[i], read.csv (txtfiles[i],
header = FALSE,
stringsAsFactor=FALSE))
result <- rbind (result, dat)
}
s10 <- sample (nrow(result), 10)
result[s10,]
colnames(result) <- c("Year", "Name", "Sex", "Count")
# cleaning exported files
rem <- file.remove(txtfiles, )
# cleaning exported files
rem <- file.remove(txtfiles)
remove(rem)
result[s10,]
survey
survey <- data.frame(
ID = c("AA", "AA", "CC", "CC", "CC", "DD", "EE"),
Date = as.Date(c("2012-09-26", "2014-01-16", "2013-03-13", "2014-04-30",
"2015-03-31", "2013-06-03", "2013-12-02")),
Response = c(3, 4, 3, 5, 4, 2, 4)
)
survey
survey <- data.frame(
ID = c("AA", "AA", "CC", "CC", "CC", "DD", "EE"),
Date = as.Date(c("2012-09-26", "2014-01-16", "2013-03-13", "2014-04-30",
"2015-03-31", "2013-06-03", "2013-12-02")),
Response = c(3, 4, 3, 5, 4, 2, 4)
)
survey
with (survey, tapply(Response, ID, mean))
rle.survey <- rle (sort(survey$ID) )
rle.survey
unique(survey)
survey |> unique(ID) |> which()
survey[which(unique(survey$ID))]
survey[which(unique(survey$ID)),]
which(unique(survey$ID))
sapply(survey$Date, max)
sapply(as.character(survey$Date), max)
lapply(as.character(survey$Date), max)
library(help = "datasets")
install.packages("cleaningBook")
install.packages("Rtools")
for (var in colnames(df) ) {
print(
paste (var, nrow( df[df[var] == '?'], ) )
)
}
#install.packages('tidyverse')
library(tidyverse)
header <- c("age", "workclass", "fnlwgt","education",
"education_num", "marital_status", "occupation",
"relationship", "race", "sex", "capital_gain", "capital_loss","hours_per_week", "native_country", "target")
df <- read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data", col_names = header,
trim_ws = TRUE)
head(df)
df %>% .[1:4, c(2:5)]
df %>% slice_min(age, prop = 0.15)
df %>% slice_sample(n=10, replace = FALSE) %>% .[,1:4]
df %>%
filter( age < 30 ) %>%
select( marital_status, age, education ) %>%
slice_sample( n = 10)
df %>% distinct(sex)
df %>% group_by(workclass) %>% .[1:10,1:4]
df %>% group_by(sex) %>% summarise( avg_age = mean(age), sd_age = sd(age))
marital.groups <- df %>% group_by(marital_status, sex) %>%
summarize( avg_age = mean(age) )
marital.groups
ungroup(marital.groups)
df %>% group_by(marital_status) %>% summarise(first(age))
df %>% group_by(sex) %>% summarise( "50%" = quantile(age, 0.5))
df %>% select(1,3,5,11,12,13) %>%
summarise( across(everything(), mean) )
for (var in colnames(df) ) {
print(
paste (var, nrow( df[df[var] == '?'], ) )
)
}
for (var in colnames(df) ) {
print(
paste (var, nrow( df[df[var] == '?', ] ) )
)
}
( df.rep <- df %>% na_if('?') )
df.rep <- df %>%
mutate( across( everything(), ~ ifelse( . == '?', NA, . ) ) )
df.rep[which(is.na(df.rep)),]
df.rep <- df %>%
mutate( across( everything(), ~ ifelse( . == '?', NA, . ) ) )
df.rep[which(is.na(df.rep["workclass"])),]
df.rep <- df %>%
mutate (workclass = replace(workclass, workclass == '?', NA),
occupation = replace(occupation, occupation == '?', NA),
native_country = replace(native_country, native_country == '?')
)
df.rep <- df %>%
mutate (workclass = replace(workclass, workclass == '?', NA),
occupation = replace(occupation, occupation == '?', NA),
native_country = replace(native_country, native_country == '?', NA)
)
slice_sample( df.rep[which(is.na(df.rep["workclass"])),], n=10 )
df.rep.na.ind <- where(is.na(df.rep["occupation"]))
df.rep.na.ind <- which(is.na(df.rep["occupation"]))
df.rep %>% fill (workclass, occupation, native_country,
.direction = "down") %>%
slice_sample(.[df.rep.na.ind,], n=10)
df.rep.na.ind <- which(is.na(df.rep["occupation"]))
df.rep %>% fill (workclass, occupation, native_country,
.direction = "down") %>% .[df.rep.na.ind,] %>%
slice_sample(n=10)
# Most frequent value
m.f.workcls <- names( table(df$workclass)[which.max(table(df$workclass))])
m.f.occp <- names( table(df$occupation)[which.max(table(df$occupation))])
# Replacing NA
df.no.na <- df.rep %>% replace_na( list( workclass = m.f.workcls,
occupation = m.f.occp) )
slice_sample( df.no.na[df.rep.na.ind,], n=10)
# Drop NA
df.no.na <- df.no.na %>% drop_na()
prop.table( table(df.rep["occupation", ]))
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()$<NA>
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()$'NA'
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()['NA']
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()[last_col(.)]
table(df.rep$occupation, useNA = 'ifany') %>% prop.table() %>% last_col()
table(df.rep$occupation, useNA = 'ifany') %>% prop.table() %>% .["<NA>"]
table(df.rep$occupation, useNA = 'ifany') %>% prop.table() %>% .["NA"]
table(df.rep$occupation, useNA = 'ifany') %>% prop.table() -> p.na
p.na["NA"]
# Get proportions with table()
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()
# Basic alternative
sum(is.na(df.rep$occupation)) / nrow(df.rep$occupation)
# Get proportions with table()
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()
# Basic alternative
sum(is.na(df.rep$occupation)) / nrow(df.rep)
# Get proportions with table()
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()
# Basic alternative
paste("NA percentage on 'occupation' variable: ",
sum(is.na(df.rep$occupation)) / nrow(df.rep) * 100)
# Get proportions with table()
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()
# Basic alternative
paste("\nNA percentage on 'occupation' variable: ",
sum(is.na(df.rep$occupation)) / nrow(df.rep) * 100)
# Get proportions with table()
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()
# Basic alternative
paste("NA percentage on 'occupation' variable: ",
sum(is.na(df.rep$occupation)) / nrow(df.rep) * 100)
df.no.na %>% arrange( desc(native_country) )
df.no.na %>% arrange( desc(native_country) ) %>% .[1:10,1:4]
df.no.na %>% arrange( desc(native_country) ) %>% .[1:10,1:5]
df.no.na %>% arrange( desc(fnlwgt) ) %>% .[1:10,1:4]
df.no.na %>%
group_by(marital_status) %>%
summarize( count = n() ,
avg_net_gain = mean( capital_gain - capital_loss) ) %>%
slice_sample(n=10) %>%
arrange( desc(avg_net_gain) )
df.no.na %>%
group_by(marital_status) %>%
summarize( count = n() ,
avg_net_gain = mean( capital_gain - capital_loss) ) %>%
arrange( desc(avg_net_gain) )
df.no.na %>% separate(target, into = c("sign", "amount"), sep = "\\b") %>%
slice_sample(n=10)
df.no.na %>% separate(target, into = c("sign", "amount"), sep = "\\b") %>%
slice_sample(n=10) %>% .[,-(3:14)]
df.no.na %>%
unite( sex, race, age, col="description", sep="_", remove = FALSE) %>%
select(sex, race, age, description, marital_status) %>%
slice_sample(n=10)
df.no.na %>%
mutate ( total_gain = capital_gain - capital_loss,
tax = ifelse( total_gain >= 15000,
total_gain * 0.21,
total_gain * 0.1) ) %>%
slice_sample(n=10) %>%
arrange ( desc(tax) )
df.no.na %>%
mutate ( total_gain = capital_gain - capital_loss,
tax = ifelse( total_gain >= 15000,
total_gain * 0.21,
total_gain * 0.1) ) %>%
slice_sample(n=10) %>% select(total_gain, tax, occupation, age) %>%
arrange ( desc(tax) )
df.no.na %>%
mutate ( total_gain = capital_gain - capital_loss,
tax = ifelse( total_gain >= 15000,
total_gain * 0.21,
total_gain * 0.1) ) %>%
slice_sample(n=10) %>% select(total_gain, tax, occupation, age) %>%
arrange ( desc(tax) )
df.no.na %>%
mutate ( total_gain = capital_gain - capital_loss,
tax = ifelse( total_gain >= 15000,
total_gain * 0.21,
total_gain * 0.1) ) %>%
slice_sample(n=10) %>% select(total_gain, tax, occupation, age) %>%
arrange ( desc(tax) )
df.no.na %>%
mutate( over_under = recore ( target, '<=50'='under', '>50'='over') ) %>%
select(target, over_under) %>%
slice_sample(n=10)
df.no.na %>%
mutate( over_under = recode ( target, '<=50'='under', '>50'='over') ) %>%
select(target, over_under) %>%
slice_sample(n=10)
df.no.na %>%
mutate( age_avg = mean(age),
over_under_age_avg = cut( age,
c(0, mean(age), max(age)),
c('Lower than avg', 'Above the avg'))) %>%
select (age, age_avg, over_under_age_avg) %>%
slice_sample(n=10)
sales <- data.frame(
date = c("2022-01-01", "2022-01-02", "2022-01-03", "2022-01-04", "2022-01-05"),
store_cd= c(1,2,3,4,5),
product_cd= c(1,2,3,4,5),
qty= c(10, 12, 9, 12,8),
sales= c(30, 60, 45, 24, 32)
)
stores <- data.frame(
store_cd= c(1,2,3,4,6),
address= c('1 main st', '20 side st','19 square blvd','101 first st','1002 retail ave'),
city= c('Main', 'East', 'West', 'North', 'South'),
open_hours= c('7-23', '7-23', '9-21', '9-21', '9-21')
)
products <- data.frame(
product_cd= c(1,2,3,4,6),
description= c('Soft drink', 'Frozen snack', 'Fruit', 'Water', 'Fruit 2'),
unit_price= c(3.0, 5.0, 5.0, 2.0, 4.0),
unit_measure= c('each', 'each', 'kg', 'each', 'kg')
)
sales %>%
left_join (products[,1:2], by='product_cd')
sales %>%
select(store_cd, sales) %>%
right_join(stores, by = 'store_cd')
sales %>% full_join(stores)
library('datasets')
data('mtcars')
matcars %>% mutate( cumsum_weight = cumsum(wt) )
data('mtcars')
force(mtcars)
force(mtcars)
matcars %>% mutate( cumsum_weight = cumsum(wt) )
mtcars %>% mutate( cumsum_weight = cumsum(wt) )
mtcars %>% mutate( cumsum_weight = cumsum(wt) ) %>% .[-(1:5)]
mtcars %>% mutate( cumsum_weight = cumsum(wt) ) %>% .[,-(1:5)]
library('datasets')
data('mtcars')
mtcars %>% mutate( cumsum_weight = cumsum(wt),
cumpct_weight = cume_dist(wt),
cummean_weight = cummean(wt) ) %>%
select(wt, cumsum_weight, cumpct_weight, cummean_weight) %>%
arrange(cumpct_weight)
library('datasets')
data('mtcars')
mtcars %>% mutate( cumsum_weight = cumsum(wt),
cumpct_weight = cume_dist(wt),
cummean_weight = cummean(wt) ) %>%
select(wt, cumsum_weight, cumpct_weight, cummean_weight) %>%
slice_sample(n=10) %>%
arrange(cumpct_weight)
mtcars %>%
mutate( transmission_type = case_when ( am == 0 ~ 'automatic',
am == 1 ~ 'manual' ) ) %>%
select(cyl, mpg, am, transmission_type) %>%
slice_sample(n=10)
knit_with_parameters("U:/GitHub/Projects/DataAnalystsJourney/r_data_science/notebooks/11_transformations_tidyverse.Rmd")
ggplot(data = mtcars) +
geom_point( aes( x = hp, y = mpg),
color = 'lightblue', size=4, alpha=0.5 ) +
ggtitle("Relationship between HP vs MPG")
ggplot(data = mtcars) +
geom_point( aes( x = hp, y = mpg),
color = 'darkblue', size=4, alpha=0.5 ) +
ggtitle("Relationship between HP vs MPG")
