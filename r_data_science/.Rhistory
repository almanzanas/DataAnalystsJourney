labs( title = "Share of Women vs. Part-Time jobs",
subtitle = "The relationship between the variables is slightly weak [0.33],\n siggesting that when the share of women is higher also there are more part-jobs") +
theme( plot.subtitle = element_text( color = "darkgray", size = 8) )
cor(df.clean$ShareWomen, df.clean$Median)
cor(df.clean$ShareWomen, df.clean$Low_wage_jobs)
ggplot(data = df.clean) +
geom_point( aes( x = ShareWomen, y = Low_wage_jobs,
color = "Low Wage Jobs"),
alpha = 1, shape = "o", size = 2) +
geom_point( aes( x = ShareWomen, y = Median,
color = "Median Salary"), alpha = 0.5) +
labs(title = "Share of women vs. low wage, and vs. Median Salary",
y = "", color = "Share of Women vs.:") +
scale_color_manual(values = c("Low Wage Jobs" = "darkblue",
"Median Salary" = "darkred") ) +
theme(legend.title = element_text())
df.clean <- df.clean %>%
mutate( ShareWomen_cat = ifelse(ShareWomen > 0.5, "higher", "lower") )
df.higher.w <- df.clean %>%
filter( ShareWomen_cat == "higher") %>%
select( Major, Major_category, ShareWomen,
ShareWomen_cat, Low_wage_jobs, Median)
df.lower.w <- df.clean %>%
filter( ShareWomen_cat == "lower") %>%
select( Major, Major_category, ShareWomen,
ShareWomen_cat, Low_wage_jobs, Median)
ks.test( df.higher.w$Low_wage_jobs, "pnorm") %>% suppressWarnings()
ks.test( df.lower.w$Low_wage_jobs, "pnorm" ) %>% suppressWarnings()
ks.test( df.higher.w$Median, "pnorm" ) %>% suppressWarnings()
ks.test( df.lower.w$Median, "pnorm" ) %>% suppressWarnings()
with(df.clean, car::leveneTest(Median, ShareWomen_cat) )  %>% suppressWarnings()
with(df.clean, car::leveneTest(Low_wage_jobs, ShareWomen_cat) )  %>% suppressWarnings()
wilcox.test(df.higher.w$Median, df.lower.w$Median)
cat("Median of Higher Share Woman: ", median(df.higher.w$Median),
"\nMedian of Lower Share Woman: ", median(df.lower.w$Median), "\n" )
t.test(df.higher.w$Low_wage_jobs, df.lower.w$Low_wage_jobs)
df.higher.samp <- df.higher.w %>%
rep_sample_n( size = 1000, reps = 200, replace = TRUE ) %>%
summarize( mu_Median = mean(Median),
mu_Low_wage = mean(Low_wage_jobs) )
df.lower.samp <- df.lower.w %>%
rep_sample_n( size = 1000, reps = 200, replace = TRUE ) %>%
summarize( mu_Median = mean(Median),
mu_Low_wage = mean(Low_wage_jobs) )
shapiro.test(df.lower.samp$mu_Median)
shapiro.test(df.higher.samp$mu_Median)
shapiro.test(df.lower.samp$mu_Low_wage)
shapiro.test(df.higher.samp$mu_Low_wage)
t.test(df.higher.samp$mu_Median, df.lower.samp$mu_Median)
t.test(df.higher.samp$mu_Low_wage, df.lower.samp$mu_Low_wage)
df.salary.w <- df.clean %>%
group_by(ShareWomen_cat) %>%
summarize(Salary_mean = mean(Median) )
ggplot( data = df.clean ) +
geom_boxplot( aes( x = ShareWomen_cat, y = Median),
fill = "lightblue", color = "darkblue" ) +
labs( title = "Average Salary When
ShareWomen is lower/higher than 50%",
subtitle = "The average salary for majors with more women enrolled \n
is lower than the majors with less women, reinforcing the perception \n
that women are getting lower salaries.",
x = "50% Share of Women",
y = "Mean Salary" ) +
geom_text( data = df.salary.w, aes( x = ShareWomen_cat,
y = Salary_mean,
label = round(Salary_mean)),
size = 2.2, vjust = 1, color = "black" ) +
theme(plot.subtitle = element_text( color = "darkgray", size = 9 ) )
gc()
library(tidyverse)
library(datasets)
library(patchwork)
data("mtcars")
ggplot(mtcars) +
geom_histogram(
mapping = aes( x = mpg ),
bins = 20,
color = "lightblue",
fill = "darkblue",
alpha = 0.6
) +
ggtitle( "Whistogram of Miles per Gallon" )
ggplot( data = mtcars ) +
geom_boxplot( aes( y = mpg ), fill = "lightblue", color = "darkblue" ) +
ggtitle( "Boxplot of miles per gallon")
View(mtcars)
ggplot( mtcars ) +
geom_boxplot( aes( x = factor(am),
y = mpg ), fill = "lightblue" ) +
labs( x = "Transmission",
title = "Comparison betweeen automatic and manual transmission on MPG",
subtitle = "" )
ggplot( mtcars ) +
geom_boxplot( aes( x = factor(am),
y = mpg ), fill = "lightblue" ) +
labs( x = "Transmission",
title = "Comparison betweeen automatic and manual transmission on MPG",
subtitle = "The median of manual cars (1) is higher" )
ggplot( data = mtcars ) +
geom_point( aes( x = wt, y = mpg ),
color = "darkblue",
size = 4,
shape = 15, # squares
alpha = 0.7 ) +
labs ( x = "Weight of the cars",
y = "Milles per Gallon",
title = "How the weight affects MPG in cars?",
subtitle = "As the weight increases, the car will maje less MPG")
ggplot( data = mtcars ) +
geom_point( aes( x = wt, y = mpg ),
color = "darkblue",
size = 4,
shape = 12, # squares
alpha = 0.7 ) +
labs ( x = "Weight of the cars",
y = "Milles per Gallon",
title = "How the weight affects MPG in cars?",
subtitle = "As the weight increases, the car will maje less MPG")
ggplot( data = mtcars ) +
geom_point( aes( x = wt, y = mpg ),
color = "darkblue",
size = 4,
shape = 11, # squares
alpha = 0.7 ) +
labs ( x = "Weight of the cars",
y = "Milles per Gallon",
title = "How the weight affects MPG in cars?",
subtitle = "As the weight increases, the car will maje less MPG")
ggplot( data = mtcars ) +
geom_point( aes( x = wt, y = mpg ),
color = "darkblue",
size = 4,
shape = 7, # squares
alpha = 0.7 ) +
labs ( x = "Weight of the cars",
y = "Milles per Gallon",
title = "How the weight affects MPG in cars?",
subtitle = "As the weight increases, the car will maje less MPG")
ggplot( data = mtcars ) +
geom_point( aes( x = wt, y = mpg ),
color = "darkblue",
size = 4,
shape = 15, # squares
alpha = 0.7 ) +
labs ( x = "Weight of the cars",
y = "Milles per Gallon",
title = "How the weight affects MPG in cars?",
subtitle = "As the weight increases, the car will maje less MPG")
ggplot( mtcars ) +
geom_boxplot( aes( x = factor(am),
y = mpg ), fill = "lightblue" ) +
labs( x = "Transmission",
title = "Comparison betweeen automatic and manual transmission on MPG",
subtitle = "The median of manual cars (1) is higher" )
ggplot( mtcars ) +
geom_bar( aes( x = factor(am),
fill = factor(am) ) ) +
# Fill in 'aes' using the same factor means color per category
labs( x = "Automatic(0) | Manual(1)" ) +
ggtitle( "Count of observations by transmission type" )
ggplot( mtcars ) +
geom_bar( aes( x = factor(am),
y = mpg,
fill = factor(am) ),
stat = "summary", fun = "mean" ) # To use the mean on 'y' axis
ggplot( mtcars ) +
stat_summary( aes( x = factor(am),
y = mpg,
fill = factor(am) ),
fun = "mean",
geom = "bar" )
ggplot( mtcars ) +
geom_col( aes( x = factor(am),
y = mpg,
fill = factor(am) ) ) +
labs( x = "Automatic(0) | Manual(1)" )
ggplot( mtcars ) +
geom_bar( aes( x = factor(cyl), fill = factor(vs) ),
position = "stack" ) +
geom_bar( aes( x = factor(cyl), fill = factor(vs) ),
position = "dodge" ) +
geom_bar( aes( x = factor(cyl), fill = factor(vs) ),
position = "fill" ) %>%
gridExtra::grid.arrange(ncol = 3)
ggplot( mtcars ) +
geom_bar( aes( x = factor(cyl), fill = factor(vs) ),
position = "stack" ) +
geom_bar( aes( x = factor(cyl), fill = factor(vs) ),
position = "dodge" ) +
geom_bar( aes( x = factor(cyl), fill = factor(vs) ),
position = "fill" )
ggplot( mtcars ) +
geom_bar( aes( x = factor(cyl), fill = factor(vs) ),
position = "stack" )
ggplot( mtcars ) +
geom_bar( aes( x = factor(cyl), fill = factor(vs) ),
position = "dodge" )
ggplot( mtcars ) +
geom_bar( aes( x = factor(cyl), fill = factor(vs) ),
position = "fill" )
df.line <- data.frame(
month = seq(1, 12, 1),
sales = rlnorm(12),
sales2 = rgamma(12)
)
df.line <- data.frame(
month = seq(1, 12, 1),
sales = rlnorm(12),
sales2 = rgamma(12, 1)
)
df.line[1:5,]
ggplot( df.line ) +
geom_line( aes( x = month,
y = sales,
group = 1),
size = 1,
color = "darkblue" ) +
ggtitle( "Car sales throughout the months")
ggplot( df.line ) +
geom_line( aes( x = month,
y = sales,
group = 1),
linewidth = 1,
color = "darkblue" ) +
ggtitle( "Car sales throughout the months")
ggplot( df.line ) +
geom_line( aes( x = month,
y = sales,
group = 1,
color = "Sales year 1"),
linewidth = 1,
linetype = 2) +
geom_line( aes( x = month,
y = sales2,
group = 1,
color = "Sales year 2"),
linewidth = 1,
linetype = 1) +
ggtitle( "Car sales throughout the monts" ) +
labs( subtitle = "Two year comparison" )
ggplot( df.line ) +
geom_line( aes( x = month,
y = sales,
group = 1,
color = "Sales year 1"), # the label for this line
linewidth = 1,
linetype = 2) +
geom_line( aes( x = month,
y = sales2,
group = 1,
color = "Sales year 2"),
linewidth = 1,
linetype = 1) +
ggtitle( "Car sales throughout the monts" ) +
labs( subtitle = "Two year comparison",
color = "Sales Year")
# Surface 3D plot
surface <- matrix( as.integer( sort( abs( runif(160, 90, 180) ) ) ),
nrow = 80, ncol = 20 )
plot_ly(z = ~ surface) %>% add_surface()
library(tidyverse)
library(lubridate)
library(datasets)
library(patchwork)
library(plotly)
library(tidyverse)
library(lubridate)
library(datasets)
library(patchwork)
library(plotly)
data("diamonds")
# Surface 3D plot
surface <- matrix( as.integer( sort( abs( runif(160, 90, 180) ) ) ),
nrow = 80, ncol = 20 )
plot_ly(z = ~ surface) %>% add_surface()
# 2D and 3D comparison
var1 = rnorm(20, mean = 25, sd = 5 )
var2 = var1 + 0.1
df.2d3d <- data.frame( var1 = var1,
var2 = var2,
var3 = 1:20,
var4 = rep( c("A", "B"), each = 10) )
## plot 2d
ggplot(df.2d3d) +
geom_point( aes( x = var1, y = var2, color = var4 ) )
# Plot 3d
plot_ly( df.2d3d, x = ~var1, y = ~var2, z = ~var3,
color = ~var4, colors = c("turquoise", "coral") ) %>%
add_markers()   # To add the points
var1 = rnorm(20, mean = 25, sd = 5 )
df.2d3d <- data.frame( var1 = var1,
var2 = var2,
var3 = 1:20,
var4 = rep( c("A", "B"), each = 10) )
ggplot(df.2d3d) +
geom_point( aes( x = var1, y = var2, color = var4 ) )
# Plot 3d
plot_ly( df.2d3d, x = ~var1, y = ~var2, z = ~var3,
color = ~var4, colors = c("turquoise", "coral") ) %>%
add_markers()   # To add the points
df.diam <- diamonds
ggplot( df.diam ) +
geom_point( aes( x = carat, y = price,
color = factor(cut), alpha = 0.5) )
ggplot( df.diam ) +
geom_point( aes( x = carat, y = price,
color = factor(cut),
alpha = 0.5 ) ) +
facet_grid(rows = vars(cut) ) +
theme( legend.position = "none" )
ggplot( df.diam ) +
geom_point( aes( x = carat, y = price,
color = cut, alpha = 0.6 ) ) +
facet_grid( rows = vars(cut), cols = vars(clarity) ) +
theme_minimal() +
theme( legend.position = "none")
g <- ggplot( df.diam ) +
geom_point( aes( x = carat, y = price,
color = factor(cut),
alpha = 0.5 ) ) +
facet_grid(rows = vars(cut) ) +
theme_minimal() +
theme( legend.position = "none" )
g + facet_wrap( vars(cut) )
# Load the map
us <- map_data("state")
# Load the dataset:
url <- "https://raw.githubusercontent.com/PacktPublishing/Data-Wrangling-with-R/main/Part3/Chapter11/USA_states.csv"
states <- read_csv(url)
remove(url)
# 'state' column to lowercase
states <- states %>% mutate( state = str_to_lower(state) )
# Map locations
us_map <- ggplot( states ) +
geom_map( aes( longitude, latitude,
map_id = state),
map = us, color = "black", fill = "azure" ) +
xlim(-130, -60) +
ylim(20,55) +
theme_void()
us_map +
geom_point( aes( x = longitude,
y = latitude,
size = GDP,
fill = GDP),
shape = 24 )
df.time <- data.frame(
date = seq(ymd('2022-01-01'), ymd('2022-06-30'), by = 'days'),
measure = as.integer(runif(181, min = 600, max = 1000) +
sort( rexp( 181, 0.001 ) ) )
)
head(df.time)
basic.plot <- ggplot( df.time ) +
geom_line( aes( x = date, y = measure ), size = 0.8 ) +
theme_minimal()
basic.plot
basic.plot +
scale_x_date(date_breaks = "4 weeks", date_labels = "%W %y")
basic.plot +
scale_x_date(date_breaks = "1 weeks", date_labels = "%d %m",
limit=as.Date( c("2022-05-01", "2022-06-01") ) )
# Surface 3D plot
surface <- matrix( as.integer( sort( abs( runif(160, 90, 180) ) ) ),
nrow = 80, ncol = 20 )
plot_ly(z = ~ surface) %>% add_surface()
# 2D and 3D comparison
var1 = rnorm(20, mean = 25, sd = 5 )
var2 = var1 + 0.1
df.2d3d <- data.frame( var1 = var1,
var2 = var2,
var3 = 1:20,
var4 = rep( c("A", "B"), each = 10) )
## plot 2d
ggplot(df.2d3d) +
geom_point( aes( x = var1, y = var2, color = var4 ) )
# Plot 3d
plot_ly( df.2d3d, x = ~var1, y = ~var2, z = ~var3,
color = ~var4, colors = c("turquoise", "coral") ) %>%
add_markers()   # To add the points
# 2D and 3D comparison
var1 = rnorm(20, mean = 25, sd = 5 )
var2 = var1 + rgamma(20,1)
df.2d3d <- data.frame( var1 = var1,
var2 = var2,
var3 = 1:20,
var4 = rep( c("A", "B"), each = 10) )
## plot 2d
ggplot(df.2d3d) +
geom_point( aes( x = var1, y = var2, color = var4 ) )
# Plot 3d
plot_ly( df.2d3d, x = ~var1, y = ~var2, z = ~var3,
color = ~var4, colors = c("turquoise", "coral") ) %>%
add_markers()   # To add the points
ggplotly(
ggplot( df.diam ) +
geom_point( aes( x = carat, y = price,
color = factor(cut), alpha = 0.5) )
)
gc()
library(tidyverse)
library(wordcloud2)
library(officer)
library(tidytext)
var1 = rnorm(20, mean = 25, sd = 5 )
var2 = var1 + rpois(20)
var1 = rnorm(20, mean = 25, sd = 5 )
var2 = var1 + rt(20)
var1 = rnorm(20, mean = 25, sd = 5 )
var2 = var1 + runif(20)
df.pwbi <- data.frame( var1 = var1,
var2 = var2,
var3 = 1:20,
var4 = rep( c("A", "B"), each = 10) )
write_csv(df.pwbi, "../data/r2pwrbi.csv")
library(ggplot2)
ggplot(dataset) +
geom_histogram( aes(var1), bins = 8,
color = "azure", fill = "darkblue") +
theme_minimal()
dataset <- df.pwbi
# dataset <- df.pwbi
library(ggplot2)
ggplot(dataset) +
geom_histogram( aes(var1), bins = 8,
color = "azure", fill = "darkblue") +
theme_minimal()
# dataset <- df.pwbi
library(ggplot2)
ggplot(dataset) +
geom_histogram( aes(var1), bins = 10,
color = "azure", fill = "darkblue") +
theme_minimal()
# dataset <- df.pwbi
library(ggplot2)
ggplot(dataset) +
geom_histogram( aes(var1), bins = 10,
color = "azure", fill = "darkblue") +
labs( title = "Histogram of Variable 1",
subtitle = "Random variable visualization on Power BI") +
theme_minimal()
var1 = rnorm(200, mean = 25, sd = 5)
var2 = var1 + runif(200, mean = 25)
var1 = rnorm(200, mean = 25, sd = 5)
var2 = var1 + rnorm(200, mean = 25, sd = 15)
df.pwbi <- data.frame( var1 = var1,
var2 = var2,
var3 = 1:200,
var4 = rep( c("A", "B", "C", "D"), each = 50) )
write_csv(df.pwbi, "../data/r2pwrbi.csv")
dataset <- df.pwbi
library(ggplot2)
ggplot(dataset) +
geom_histogram( aes(var1), bins = 10,
color = "azure", fill = "darkblue") +
labs( title = "Histogram of Variable 1",
subtitle = "Random variable visualization on Power BI") +
theme_minimal()
library(tidyverse)
library(wordcloud2)
library(officer)
library(tidytext)
doc.text <- read_docx("../data/chapter10_for_wordcloud.docx")
doc.text <- read_docx("../data/Chapter10_for_wordcloud.docx")
doc.text <- read_docx("../data/Chapter10_for_wordcloud.docx")
content <- docx_summary(doc.text)
head(content)
text <- content %>% select(content) %>% na_if("") %>% drop_na()
text <- content %>% select(text) %>% na_if("") %>% drop_na()
text <- content %>% select(text) %>%
mutate( text = replace(text, "", NA) ) %>%
drop_na()
text <- content %>% select(text) %>%
mutate( text = replace(text, c(""), NA ) ) %>%
drop_na()
text <- content[,"text"]
text[text[1:nrow(text)] == ""]
text <- content %>% select(text)
text[text[1:nrow(text)] == ""]
text[text[1:nrow(text)] == "",]
text[text[1:nrow(text),] == ""]
text[text[1:nrow(text),] == "",]
text[!text[1:nrow(text),] == "",]
text <- content %>% select(text) %>%
mutate( text = replace(text, text[text[1:nrow(text),] == "",], NA ) ) %>%
drop_na()
text <- content %>%
select(text) %>%
na_if("") %>%
drop_na()
text <- content %>%
select(text)
text <- na_if(text[["text"]], "")
text <- drop_na(text)
text <- text %>% drop_na()
text <- tibble(text)
text <- text %>% drop_na()
text.tokens <- text %>%
unnest_tokens( output = word, input = text )
unnest_tokens %>% head()
unnest_tokens %>% .[10:16,]
unnest_tokens %>% .[10:16]
text.tokens %>% head()
text.tk.clean <- text.tokens %>%
filter( str_detect(word, "\\D") )
text.tk.clean <- text.tk.clean %>%
filter( !str_detect(word, "[:punct:]"))
data(stop_words)
text.tk.clean <- text.tk.clean %>%
anti_join(stop_words)
word.freq <- text.tk.clean %>%
count(word, sort = TRUE)
head(word.freq, 10)
