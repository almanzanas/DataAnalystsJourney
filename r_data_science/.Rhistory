length(pos.spam)
length(neg.spam)
1813 * 2788
2 * 4377855
8755710 / 5054644
(2 * wilx$statistic) / (length(pos.spam) * length(neg.spam))
# Size effect formula by Wendt
rbis <- 1 - ( (2 * wilx$statistic) / (length(pos.spam) * length(neg.spam)) )
rbis
# Size effect formula by Wendt
rbis <- (1 - ( (2 * wilx$statistic) / (length(pos.spam) * length(neg.spam)) ))
rbis
# Size effect formula by Wendt
rbis <- (2 * wilx$statistic) / (length(pos.spam) * length(neg.spam))
rbis
pos.spam <- df.top[df.top["spam_cat"] == 1,][["top_words_pct"]]
neg.spam <- df.top[df.top["spam_cat"] == 0,][["top_words_pct"]]
ks.test(pos.spam, neg.spam)
wilx <- wilcox.test(pos.spam, neg.spam)
wilx
# Size effect formula by Wendt
rbis <- sum(-1, (2 * wilx$statistic) / (length(pos.spam) * length(neg.spam)) )
cat("U Mann Whitney effect size r = ", rbis)
View(df.long)
df.long %>%
filter( str_detect(words, "char_") & spam_cat == 1) %>%
ggplot() +
geom_boxplot( aes( y = reorder(words, pct), x = pct, fill = spam_cat ) ) +
labs( title = "Percentages of special characters and their association with spam emails",
subtitle = "The frequency of appearance of some characters in emails is more associated with spam",
x = "Percentage",
y = "Character" ) +
theme_classic() +
theme( plot.subtitle = element_text( color = "darkgray", size = 10 ),
legend.position = "none")
df.char <- df %>%
select_if(str_detect(pattern = "char_")) %>%
mutate( char_pct = rowSums( across( where(is.numeric) ) ) )
df.char <- df %>%
select_if(str_detect(colnames(df), pattern = "char_")) %>%
mutate( char_pct = rowSums( across( where(is.numeric) ) ) )
df.char <- df %>%
select_if(str_detect(colnames(df), pattern = "char_")) %>%
mutate( char_pct = rowSums( across( where(is.numeric) ) ),
spam_cat = spam_cat)
df.char <- df %>%
select_if(str_detect(colnames(df), pattern = c("char_", "spam_cat"))) %>%
mutate( char_pct = rowSums( across( where(is.numeric) ) ),
spam_cat = spam_cat)
df.char <- df %>%
select_if(str_detect(colnames(df), pattern = c("char_", "spam_cat"))) %>%
mutate( char_pct = rowSums( across( where(is.numeric) ) ) )
df.char <- df %>%
select_if(str_detect(colnames(df), pattern = "char_|^spam_cat")) %>%
mutate( char_pct = rowSums( across( where(is.numeric) ) ) )
df.char <- df %>%
select_if(str_detect(colnames(df), pattern = "char_|^spam_cat")) %>%
mutate( char_pct = rowSums( across( where(is.numeric) ) ) )
g3 <- ggplot(df.char) +
geom_boxplot( aes( y = factor(spam_cat), x = char_pct),
fill = c("turquoise", "coral") ) +
labs( title = "How the presence of characters associated with spam emails
impacts the classification",
subtitle = "The spam emails(1) have a ghigher percentage of those characters.") +
theme_classic()
g3
pairwise.wilcox.test(df.char, g = factor(spam_cat) )
pairwise.wilcox.test(df.char, g = factor(df.char$spam_cat) )
# Multiple comparisons for special sharacters by spam_cat
df.char$spam_cat <- as.factor(df.char$spam_cat)
pairwise.wilcox.test(df.char, g = factor(df.char$spam_cat) )
# Multiple comparisons for special sharacters by spam_cat
df.char$spam_cat <- as.factor(df.char$spam_cat)
pairwise.wilcox.test(df.char[,1:6], g = factor(df.char$spam_cat) )
View(df.char)
df.char.long <- pivot_longer(df.char, names_to = "chars", values_to = "pct")
df.char.long <- pivot_longer(df.char, cols = 1:6, names_to = "chars", values_to = "pct")
pairwise.wilcox.test(df.char.long, g = factor(df.char.long$spam_cat) )
pairwise.wilcox.test(df.char.long, g = df.char.long$spam_cat )
pairwise.wilcox.test(df.char.long[["pct"]], g = df.char.long[["spam_cat"]] )
pairwise.wilcox.test(df.char.long[["pct"]], g = df.char.long[["chars"]] )
# Multiple comparisons for special sharacters by spam_cat
df.char.zero <- df.char %>% filter(spam_cat == 0)
df.char.one <- df.char %>% filter(spam_cat == 1)
pairwise.wilcox.test(df.char.zero[,1:6] ~ df.char.one[,1:6], g = "spam_cat" )
pairwise.wilcox.test(df.char.zero[,1:6] ~ df.char.one[,1:6])
pairwise.wilcox.test(df.char.zero[,1:6] ~ df.char.one[,1:6], g = colnames(df.char.zero[,1:6]))
df.char.zero <- df.char %>% filter(spam_cat == 0)
df.char.one <- df.char %>% filter(spam_cat == 1)
for (var in colnames(df.char.zero)) {
wilcox.test(df.char.zero[[var]], df.char.one[[var]])
}
df.char.zero <- df.char %>% filter(spam_cat == 0)
df.char.one <- df.char %>% filter(spam_cat == 1)
for (var in colnames(df.char.zero[,1:6])) {
wilcox.test(df.char.zero[[var]], df.char.one[[var]])
}
for (var in colnames(df.char.zero[,1:6])) {
wilcox.test(df.char.zero[[var]], df.char.one[[var]])
}
for (var in colnames(df.char.zero[,1:6])) {
wilx <- wilcox.test(df.char.zero[[var]], df.char.one[[var]])
print(var, wilx$p.value)
}
colnames(df.char.zero)
colnames(df.char.zero[,1:6])
df.char.zero <- df.char %>% filter(spam_cat == 0)
df.char.one <- df.char %>% filter(spam_cat == 1)
for (var in colnames(df.char.zero[,1:6])) {
wilx <- wilcox.test(df.char.zero[[var]], df.char.one[[var]])
cat("Mann-Whitney U between spam and not spam on :", var,
"\np-value:", wilx$p.value)
}
df.char.zero <- df.char %>% filter(spam_cat == 0)
df.char.one <- df.char %>% filter(spam_cat == 1)
for (var in colnames(df.char.zero[,1:6])) {
wilx <- wilcox.test(df.char.zero[[var]], df.char.one[[var]])
cat("\nMann-Whitney U between spam and not spam on :", var,
"\np-value:", wilx$p.value)
}
df.char.zero <- df.char %>% filter(spam_cat == 0)
df.char.one <- df.char %>% filter(spam_cat == 1)
for (var in colnames(df.char.zero[,1:6])) {
wilx <- wilcox.test(df.char.zero[[var]], df.char.one[[var]])
cat("\nMann-Whitney U between spam and not spam on :", var,
"\np-value:", sprintf("%6.4f", wilx$p.value))
}
cat("\nMann-Whitney U between spam and not spam on:", var,
"\np-value:", sprintf("%6.4f", wilx$p.value))
for (var in colnames(df.char.zero[,1:6])) {
wilx <- wilcox.test(df.char.zero[[var]], df.char.one[[var]])
cat("\nMann-Whitney U between spam and not spam on:", var,
"\np-value:", sprintf("%6.4f", wilx$p.value))
}
for (var in colnames(df.char.zero[,1:6])) {
boxplot(c(df.char.zero[[var]], df.char.one[[var]]),
main = paste("Character boxplot comparison on", var) )
}
for (var in colnames(df.char.zero[,1:6])) {
boxplot(df.char.zero[[var]], df.char.one[[var]],
main = paste("Character boxplot comparison on", var) )
}
for (var in colnames(df.char.zero[,1:6])) {
boxplot(df.char.zero[[var]], df.char.one[[var]],
main = paste("Character boxplot comparison on", var),
xlab = "Not Spam (0) | Spam (1)")
}
df.char.long %>% ggplot() +
geom_boxplot( aes( y = chars, x = pct))
df.char.long %>%
ggplot() +
geom_boxplot( aes( y = chars, x = df.char.long[df.char.long[spam_cat] == 1]$pct))
df.char.zero %>%
pivot_longer(cols = 1:6, names_to = "chars", values_to = "pct") %>%
ggplot() +
geom_boxplot( aes( y = chars, x = pct) )
g4 <- df.char.zero %>%
pivot_longer(cols = 1:6, names_to = "chars", values_to = "pct") %>%
ggplot() +
geom_boxplot( aes( y = chars, x = pct) )
g5 <- df.char.one %>%
pivot_longer(cols = 1:6, names_to = "chars", values_to = "pct") %>%
ggplot() +
geom_boxplot( aes( y = chars, x = pct) )
(g4 / g5)
g4 <- df.char.zero %>%
pivot_longer(cols = 1:6, names_to = "chars", values_to = "pct") %>%
ggplot() +
geom_boxplot( aes( y = chars, x = pct) )
g5 <- df.char.one %>%
pivot_longer(cols = 1:6, names_to = "chars", values_to = "pct") %>%
ggplot() +
geom_boxplot( aes( y = chars, x = pct) )
(g4 / g5)
g4 <- df.char.zero %>%
pivot_longer(cols = 1:6, names_to = "chars", values_to = "pct") %>%
ggplot() +
geom_boxplot( aes( y = chars, x = pct) ) +
labs( y = "Characters in not spam emails",
x = "")
g5 <- df.char.one %>%
pivot_longer(cols = 1:6, names_to = "chars", values_to = "pct") %>%
ggplot() +
geom_boxplot( aes( y = chars, x = pct) ) +
labs( x = "Frequencies",
y = "Characters in spam emails")
(g4 / g5)
g4 <- df.char.zero %>%
pivot_longer(cols = 1:6, names_to = "chars", values_to = "pct") %>%
ggplot() +
geom_boxplot( aes( y = chars, x = pct) ) +
labs( y = "Characters in not spam emails",
x = "") +
theme_classic()
g5 <- df.char.one %>%
pivot_longer(cols = 1:6, names_to = "chars", values_to = "pct") %>%
ggplot() +
geom_boxplot( aes( y = chars, x = pct) ) +
labs( x = "Frequencies",
y = "Characters in spam emails") +
theme_classic()
(g4 / g5)
df.char.zero <- df.char %>% filter(spam_cat == 0)
df.char.one <- df.char %>% filter(spam_cat == 1)
for (var in colnames(df.char.zero[,1:6])) {
wilx <- wilcox.test(df.char.zero[[var]], df.char.one[[var]])
rbis <- sum(-1, (2 * wilx$statistic) / (length(pos.spam) * length(neg.spam)) )
cat("\nMann-Whitney U between spam and not spam on:", var,
"\np-value:", sprintf("%6.4f", wilx$p.value),
"\nr:", rbis)
}
df.char.zero <- df.char %>% filter(spam_cat == 0)
df.char.one <- df.char %>% filter(spam_cat == 1)
for (var in colnames(df.char.zero[,1:6])) {
wilx <- wilcox.test(df.char.zero[[var]], df.char.one[[var]])
rbis <- abs(sum(-1, (2 * wilx$statistic) / (length(pos.spam) * length(neg.spam)) ))
cat("\nMann-Whitney U between spam and not spam on:", var,
"\np-value:", sprintf("%6.4f", wilx$p.value),
"\nr:", rbis)
}
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest) %>%
mutate( spam_cat = ifelse(1, "is_spam", "no_spam") ) %>%
mutate_at(spam_cat, is.factor)
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate( spam_cat = ifelse(1, "is_spam", "no_spam") ) %>%
mutate( spam_cat = is.factor(spam_cat)
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate( spam_cat = ifelse(1, "is_spam", "no_spam") ) %>%
mutate( spam_cat = is.factor(spam_cat) )
View(df.model)
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate( spam_cat = replace(spam_cat, list(1 = "is_spam", 0 = "no_spam")) ) %>%
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate( spam_cat = ifelse(spam_cat == 1, "is_spam", "no_spam") ) %>%
mutate( spam_cat = is.factor(spam_cat) )
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate( spam_cat = ifelse(spam_cat == 1, "is_spam", "no_spam") ) %>%
mutate( spam_cat = is.factor(spam_cat) )
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate( spam_cat = ifelse(df$spam_cat == 1, "is_spam", "no_spam") ) %>%
mutate( spam_cat = is.factor(spam_cat) )
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate( spam_cat = is.factor(spam_cat) )
distinct(df.model$spam_cat)
table(df.model$spam_cat)
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest )
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate(spam_cat = ifelse(spam_cat == 1, "is_spam", "no_spam"))
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate(spam_cat = ifelse(spam_cat == 1, "is_spam", "no_spam")) %>%
mutate_at(spam_cat, is.factor)
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate(spam_cat = ifelse(spam_cat == 1, "is_spam", "no_spam")) %>%
mutate_at(cars(spam_cat), is.factor)
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate(spam_cat = ifelse(spam_cat == 1, "is_spam", "no_spam")) %>%
mutate_at(vars(spam_cat), is.factor)
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate(spam_cat = ifelse(spam_cat == 1, "is_spam", "no_spam")) %>%
mutate_if(is.character, as.factor)
df.model <- df %>%
bind_cols( top_words_pct = df.top$top_words_pct ) %>%
select( spam_cat, top_words_pct,
`char_freq_!`, `char_freq_(`, `char_freq_$`,
capital_run_length_total, capital_run_length_longest ) %>%
mutate(spam_cat = ifelse(spam_cat == 1, "is_spam", "no_spam")) %>%
mutate_at(vars(spam_cat), as.factor)
df.model[1:9,]
writeLines("Original set:")
prop.table( table(df$spam_cat) )
writeLines("==================")
writeLines("Train set:")
prop.table( table(train.80$spam_cat) )
n.rows <- nrow(df.model)
idx <- sample(1:nrows, size = 0.8*n.rows)
n.rows <- nrow(df.model)
idx <- sample(1:nrows, size = 0.8 * n.rows)
n.rows <- nrow(df.model)
idx <- sample(1:n.rows, size = 0.8 * n.rows)
train.80 <- df.model[idx,]
test.20 <- df.model[-idx,]
writeLines("Original set:")
prop.table( table(df$spam_cat) )
writeLines("==================")
writeLines("Train set:")
prop.table( table(train.80$spam_cat) )
writeLines("==================")
writeLines("Test set:")
prop.table( table(test.20$spam_cat) )
model.rf <- randomForest( spam_cat ~ ., data = train.80,
importance = TRUE,
ntree = 250)
colnames(df.model[,3:5]) <- c("char_freq_exclam", "char_freq_paren", "char_freq_dollar")
slice_sample(df.model, n = 9)
df.model[,3:5]
colnames(df.model[,3:5])
colnames(df.model)[,3:5] <- c("char_freq_exclam", "char_freq_paren", "char_freq_dollar")
slice_sample(df.model, n = 9)
colnames(df.model)[,3:5] <- c("char_freq_exclam", "char_freq_paren", "char_freq_dollar")
colnames(df.model)[3:5] <- c("char_freq_exclam", "char_freq_paren", "char_freq_dollar")
slice_sample(df.model, n = 9)
n.rows <- nrow(df.model)
idx <- sample(1:n.rows, size = 0.8 * n.rows)
train.80 <- df.model[idx,]
test.20 <- df.model[-idx,]
writeLines("Original set:")
prop.table( table(df$spam_cat) )
writeLines("==================")
writeLines("Train set:")
prop.table( table(train.80$spam_cat) )
writeLines("==================")
writeLines("Test set:")
prop.table( table(test.20$spam_cat) )
n.rows <- nrow(df.model)
idx <- sample(1:n.rows, size = 0.8 * n.rows)
train.80 <- df.model[idx,]
test.20 <- df.model[-idx,]
writeLines("Original set:")
prop.table( table(df$spam_cat) )
writeLines("==================")
writeLines("Train set:")
prop.table( table(train.80$spam_cat) )
writeLines("==================")
writeLines("Test set:")
prop.table( table(test.20$spam_cat) )
model.rf <- randomForest( spam_cat ~ ., data = train.80,
importance = TRUE,
ntree = 250)
plot(model.rf)
varImpPlot(model.rf)
varImpPlot(model.rf)
# Prediction:
model.preds <- predict(rf, test.20)
# Prediction:
model.preds <- predict(model.rf, test.20)
library(tidyverse)
library(patchwork)
library(skimr)
library(randomForest)
library(caret)
library(ROCR)
# Prediction:
model.preds <- predict(model.rf, test.20)
confusionMatrix(model.preds, test.20$spam_cat)
540 / (540+40)
model.df.preds <- data.frame( predict(rf, test, type='prop') )
model.df.preds <- data.frame( predict(model.rf, test.20, type='prop') )
model.df.preds <- data.frame( predict(model.rf, test.20, type='prob') )
model.roc <- prediction(model.df.preds$is_spam, test.20$spam_cat)
roc <- performance(model.roc, 'tpr', 'fpr')
plot(roc, colorize = T, lwd = 2)
abline(0.0, 1.0)
roc <- performance(model.roc, 'fpr', 'tpr')
plot(roc, colorize = T, lwd = 2)
abline(0.0, 1.0)
roc <- performance(model.roc, 'fpr', 'tpr')
plot(roc, colorize = T, lwd = 2)
abline(0.0, 1.0)
# Prediction:
model.preds <- predict(model.rf, test.20)
confusionMatrix(model.preds, test.20$spam_cat)
model.df.preds <- data.frame( predict(model.rf, test.20, type='prob') )
model.roc <- prediction(model.df.preds$no_spam, test.20$spam_cat)
roc <- performance(model.roc, 'tpr', 'fpr')
plot(roc, colorize = T, lwd = 2)
abline(0.0, 1.0)
View(model.roc)
View(roc)
View(model.df.preds)
model.df.preds <- data.frame( predict(model.rf, test.20, type='prob') )
model.roc <- prediction(model.df.preds$is_spam, test.20$spam_cat)
roc <- performance(model.roc, 'tpr', 'fpr')
plot(roc, colorize = T, lwd = 2)
abline(0.0, 1.0)
# Prediction:
model.preds <- predict(model.rf, test.20)
confusionMatrix(model.preds, test.20$spam_cat, positive = "no_spam")
model.df.preds <- data.frame( predict(model.rf, test.20, type='prob') )
model.roc <- prediction(model.df.preds$is_spam, test.20$spam_cat)
roc <- performance(model.roc, 'tpr', 'fpr')
plot(roc, colorize = T, lwd = 2)
abline(0.0, 1.0)
model.df.preds <- data.frame( predict(model.rf, test.20, type='prob') )
model.roc <- prediction(model.df.preds$no_spam, test.20$spam_cat)
roc <- performance(model.roc, 'tpr', 'fpr')
plot(roc, colorize = T, lwd = 2)
abline(0.0, 1.0)
roc <- performance(model.roc, 'tpr', 'fpr', 'auc')
roc <- performance(model.roc, 'tpr', 'fpr')
auc <- performance(model.roc, "auc")
model.df.preds <- data.frame( predict(model.rf, test.20, type='prob') )
model.roc <- prediction(model.df.preds$no_spam, test.20$spam_cat)
roc <- performance(model.roc, 'tpr', 'fpr')
auc <- performance(model.roc, "auc")
plot(roc, colorize = T, lwd = 2,
main = "ROC curve. 'no_spam' as positive class.",
sub = paste( "AUC =", auc@y.values[[1]]) )
abline(0.0, 1.0)
View(auc)
View(df.model)
# Creating a function to prepare any text for input in the model
prepare_input <- function (text, spam_words){
"This function takes a string text as input, counts the quantities of !, $, (), uppercase letters, longest sequence of uppercase, words in the spam list.
* Input: string
* Returns: data frame for input in the RF model"
# Counts of the punctuation
exclamation <- str_count(text, pattern="[!]")
parenthesis <-  str_count(text, pattern="[()]")
dollar_sign <-  str_count(text, pattern="[$]")
# Counts of UPPERCASE
total_uppercase <- str_count(text, "[A-Z]")
# Remove punctuation for total words count
text_no_puncuation <- str_remove_all(text, pattern="[:punct:]|[$]*")
#longest_uppercase
all_words <- str_split(text_no_puncuation, " ")
all_words <- all_words[[1]]
# Create a vector with all the uppercase counts
char_counts <- c()
for (word in all_words) {
if (word == toupper(word)) {
char_counts <- c(char_counts, nchar(word))
} #enf if
}#end for
# Get only the longest uppercase word size
if (max(char_counts) < 0) {
longest_upper <- 0} else {longest_upper <- max(char_counts)}
# Count how many spam words are in the text
# Create a counter of spam words
top_w <- 0
# For each word
for (word in all_words) {
# if word is in the spam list, count +1
if (tolower(word) %in% spam_words) {
top_w <- top_w + 1
} #enf if
}#end for
# Determine length of the text
text_length <- length(all_words)
# Create a data frame with all counts in percentages (divided by the text length)
input <- data.frame(top_words_pct= 100*top_w / text_length,
char_freq_exclam= 100*exclamation / text_length,
char_freq_paren= 100*parenthesis / text_length,
char_freq_dollar= 100*dollar_sign / text_length,
capital_run_length_total= total_uppercase,
capital_run_length_longest= longest_upper )
return(input)
} #end function
text1 <- 'SALE!! SALE!! SALE!! SUPER SALEEEE!! This is one of the best sales of the year! More than #3000# products with discounts up to $500 off!! Visit our page and Save $$$ now! Order your product NOW (here) and get one for free !'
text2 <- 'DEAR MR. JOHN, You will find enclosed the file we talked about during your meeting earlier today. The attachment received here is also available in our web site at this address: www.DUMMYSITE.com. Sale.'
spam.words <- c('you', 'your', 'will', 'free', 'our', 'all', 'mail', 'email', 'business', 'remove', '000', 'font', 'money', 'internet', 'credit', 'over', 'order', '3d', 'address', 'make', 'people', 're', 'receive', 'sale')
input <- prepare_input(text1, spam.words)
input <- prepare_input(text1, spam.words)
data.frame( predict(model.rf, input, type = "prob") )
input <- prepare_input(text2, spam.words)
data.frame( predict(model.rf, input, type = "prob") )
saveRDS(model.rf, "../scripts/model_rf_spam.rds")
