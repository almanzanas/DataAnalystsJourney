slice_sample( n = 10)
df %>% distinct(sex)
df %>% group_by(workclass) %>% .[1:10,1:4]
df %>% group_by(sex) %>% summarise( avg_age = mean(age), sd_age = sd(age))
marital.groups <- df %>% group_by(marital_status, sex) %>%
summarize( avg_age = mean(age) )
marital.groups
ungroup(marital.groups)
df %>% group_by(marital_status) %>% summarise(first(age))
df %>% group_by(sex) %>% summarise( "50%" = quantile(age, 0.5))
df %>% select(1,3,5,11,12,13) %>%
summarise( across(everything(), mean) )
for (var in colnames(df) ) {
print(
paste (var, nrow( df[df[var] == '?'], ) )
)
}
for (var in colnames(df) ) {
print(
paste (var, nrow( df[df[var] == '?', ] ) )
)
}
( df.rep <- df %>% na_if('?') )
df.rep <- df %>%
mutate( across( everything(), ~ ifelse( . == '?', NA, . ) ) )
df.rep[which(is.na(df.rep)),]
df.rep <- df %>%
mutate( across( everything(), ~ ifelse( . == '?', NA, . ) ) )
df.rep[which(is.na(df.rep["workclass"])),]
df.rep <- df %>%
mutate (workclass = replace(workclass, workclass == '?', NA),
occupation = replace(occupation, occupation == '?', NA),
native_country = replace(native_country, native_country == '?')
)
df.rep <- df %>%
mutate (workclass = replace(workclass, workclass == '?', NA),
occupation = replace(occupation, occupation == '?', NA),
native_country = replace(native_country, native_country == '?', NA)
)
slice_sample( df.rep[which(is.na(df.rep["workclass"])),], n=10 )
df.rep.na.ind <- where(is.na(df.rep["occupation"]))
df.rep.na.ind <- which(is.na(df.rep["occupation"]))
df.rep %>% fill (workclass, occupation, native_country,
.direction = "down") %>%
slice_sample(.[df.rep.na.ind,], n=10)
df.rep.na.ind <- which(is.na(df.rep["occupation"]))
df.rep %>% fill (workclass, occupation, native_country,
.direction = "down") %>% .[df.rep.na.ind,] %>%
slice_sample(n=10)
# Most frequent value
m.f.workcls <- names( table(df$workclass)[which.max(table(df$workclass))])
m.f.occp <- names( table(df$occupation)[which.max(table(df$occupation))])
# Replacing NA
df.no.na <- df.rep %>% replace_na( list( workclass = m.f.workcls,
occupation = m.f.occp) )
slice_sample( df.no.na[df.rep.na.ind,], n=10)
# Drop NA
df.no.na <- df.no.na %>% drop_na()
prop.table( table(df.rep["occupation", ]))
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()$<NA>
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()$'NA'
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()['NA']
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()[last_col(.)]
table(df.rep$occupation, useNA = 'ifany') %>% prop.table() %>% last_col()
table(df.rep$occupation, useNA = 'ifany') %>% prop.table() %>% .["<NA>"]
table(df.rep$occupation, useNA = 'ifany') %>% prop.table() %>% .["NA"]
table(df.rep$occupation, useNA = 'ifany') %>% prop.table() -> p.na
p.na["NA"]
# Get proportions with table()
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()
# Basic alternative
sum(is.na(df.rep$occupation)) / nrow(df.rep$occupation)
# Get proportions with table()
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()
# Basic alternative
sum(is.na(df.rep$occupation)) / nrow(df.rep)
# Get proportions with table()
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()
# Basic alternative
paste("NA percentage on 'occupation' variable: ",
sum(is.na(df.rep$occupation)) / nrow(df.rep) * 100)
# Get proportions with table()
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()
# Basic alternative
paste("\nNA percentage on 'occupation' variable: ",
sum(is.na(df.rep$occupation)) / nrow(df.rep) * 100)
# Get proportions with table()
table(df.rep$occupation, useNA = 'ifany') %>% prop.table()
# Basic alternative
paste("NA percentage on 'occupation' variable: ",
sum(is.na(df.rep$occupation)) / nrow(df.rep) * 100)
df.no.na %>% arrange( desc(native_country) )
df.no.na %>% arrange( desc(native_country) ) %>% .[1:10,1:4]
df.no.na %>% arrange( desc(native_country) ) %>% .[1:10,1:5]
df.no.na %>% arrange( desc(fnlwgt) ) %>% .[1:10,1:4]
df.no.na %>%
group_by(marital_status) %>%
summarize( count = n() ,
avg_net_gain = mean( capital_gain - capital_loss) ) %>%
slice_sample(n=10) %>%
arrange( desc(avg_net_gain) )
df.no.na %>%
group_by(marital_status) %>%
summarize( count = n() ,
avg_net_gain = mean( capital_gain - capital_loss) ) %>%
arrange( desc(avg_net_gain) )
df.no.na %>% separate(target, into = c("sign", "amount"), sep = "\\b") %>%
slice_sample(n=10)
df.no.na %>% separate(target, into = c("sign", "amount"), sep = "\\b") %>%
slice_sample(n=10) %>% .[,-(3:14)]
df.no.na %>%
unite( sex, race, age, col="description", sep="_", remove = FALSE) %>%
select(sex, race, age, description, marital_status) %>%
slice_sample(n=10)
df.no.na %>%
mutate ( total_gain = capital_gain - capital_loss,
tax = ifelse( total_gain >= 15000,
total_gain * 0.21,
total_gain * 0.1) ) %>%
slice_sample(n=10) %>%
arrange ( desc(tax) )
df.no.na %>%
mutate ( total_gain = capital_gain - capital_loss,
tax = ifelse( total_gain >= 15000,
total_gain * 0.21,
total_gain * 0.1) ) %>%
slice_sample(n=10) %>% select(total_gain, tax, occupation, age) %>%
arrange ( desc(tax) )
df.no.na %>%
mutate ( total_gain = capital_gain - capital_loss,
tax = ifelse( total_gain >= 15000,
total_gain * 0.21,
total_gain * 0.1) ) %>%
slice_sample(n=10) %>% select(total_gain, tax, occupation, age) %>%
arrange ( desc(tax) )
df.no.na %>%
mutate ( total_gain = capital_gain - capital_loss,
tax = ifelse( total_gain >= 15000,
total_gain * 0.21,
total_gain * 0.1) ) %>%
slice_sample(n=10) %>% select(total_gain, tax, occupation, age) %>%
arrange ( desc(tax) )
df.no.na %>%
mutate( over_under = recore ( target, '<=50'='under', '>50'='over') ) %>%
select(target, over_under) %>%
slice_sample(n=10)
df.no.na %>%
mutate( over_under = recode ( target, '<=50'='under', '>50'='over') ) %>%
select(target, over_under) %>%
slice_sample(n=10)
df.no.na %>%
mutate( age_avg = mean(age),
over_under_age_avg = cut( age,
c(0, mean(age), max(age)),
c('Lower than avg', 'Above the avg'))) %>%
select (age, age_avg, over_under_age_avg) %>%
slice_sample(n=10)
sales <- data.frame(
date = c("2022-01-01", "2022-01-02", "2022-01-03", "2022-01-04", "2022-01-05"),
store_cd= c(1,2,3,4,5),
product_cd= c(1,2,3,4,5),
qty= c(10, 12, 9, 12,8),
sales= c(30, 60, 45, 24, 32)
)
stores <- data.frame(
store_cd= c(1,2,3,4,6),
address= c('1 main st', '20 side st','19 square blvd','101 first st','1002 retail ave'),
city= c('Main', 'East', 'West', 'North', 'South'),
open_hours= c('7-23', '7-23', '9-21', '9-21', '9-21')
)
products <- data.frame(
product_cd= c(1,2,3,4,6),
description= c('Soft drink', 'Frozen snack', 'Fruit', 'Water', 'Fruit 2'),
unit_price= c(3.0, 5.0, 5.0, 2.0, 4.0),
unit_measure= c('each', 'each', 'kg', 'each', 'kg')
)
sales %>%
left_join (products[,1:2], by='product_cd')
sales %>%
select(store_cd, sales) %>%
right_join(stores, by = 'store_cd')
sales %>% full_join(stores)
library('datasets')
data('mtcars')
matcars %>% mutate( cumsum_weight = cumsum(wt) )
data('mtcars')
force(mtcars)
force(mtcars)
matcars %>% mutate( cumsum_weight = cumsum(wt) )
mtcars %>% mutate( cumsum_weight = cumsum(wt) )
mtcars %>% mutate( cumsum_weight = cumsum(wt) ) %>% .[-(1:5)]
mtcars %>% mutate( cumsum_weight = cumsum(wt) ) %>% .[,-(1:5)]
library('datasets')
data('mtcars')
mtcars %>% mutate( cumsum_weight = cumsum(wt),
cumpct_weight = cume_dist(wt),
cummean_weight = cummean(wt) ) %>%
select(wt, cumsum_weight, cumpct_weight, cummean_weight) %>%
arrange(cumpct_weight)
library('datasets')
data('mtcars')
mtcars %>% mutate( cumsum_weight = cumsum(wt),
cumpct_weight = cume_dist(wt),
cummean_weight = cummean(wt) ) %>%
select(wt, cumsum_weight, cumpct_weight, cummean_weight) %>%
slice_sample(n=10) %>%
arrange(cumpct_weight)
mtcars %>%
mutate( transmission_type = case_when ( am == 0 ~ 'automatic',
am == 1 ~ 'manual' ) ) %>%
select(cyl, mpg, am, transmission_type) %>%
slice_sample(n=10)
knit_with_parameters("U:/GitHub/Projects/DataAnalystsJourney/r_data_science/notebooks/11_transformations_tidyverse.Rmd")
ggplot(data = mtcars) +
geom_point( aes( x = hp, y = mpg),
color = 'lightblue', size=4, alpha=0.5 ) +
ggtitle("Relationship between HP vs MPG")
ggplot(data = mtcars) +
geom_point( aes( x = hp, y = mpg),
color = 'darkblue', size=4, alpha=0.5 ) +
ggtitle("Relationship between HP vs MPG")
library(tidyverse)
library(skimr)
library(statsr)
library(GGally)
library(corrplot)
library(tidyverse, quietly = TRUE)
library(skimr, quietly = TRUE)
library(statsr, quietly = TRUE)
library(GGally, quietly = TRUE)
library(corrplot, quietly = TRUE)
# Reading a csv from a web
url <- "https://raw.githubusercontent.com/fivethirtyeight/data/master/college-majors/recent-grads.csv"
df <- read_csv(url)
gc()
# Reading a csv from a web
url <- "https://raw.githubusercontent.com/fivethirtyeight/data/master/college-majors/recent-grads.csv"
df <- read_csv(url)
df.original <- df
# Reading a csv from a web
url <- "https://raw.githubusercontent.com/fivethirtyeight/data/master/college-majors/recent-grads.csv"
df <- read_csv(url)
df.original <- df
df %>%
head()
glimpse(df)
table(df$Major)
table(df$Major_code)
table(df$Major_category)
cols.factor <- c("Mayor", "Mayor_code", "Mayor_category")
df <- df %>%
mutate_at(cols.factor, character)
cols.factor <- c("Major", "Major_code", "Major_category")
df <- df %>%
mutate_at(cols.factor, character)
glimpse(df)
cols.factor <- c("Major", "Major_code", "Major_category")
df <- df %>%
mutate_at(cols.factor, factor)
cols.factor <- c("Major", "Major_code", "Major_category")
df <- df %>%
mutate_at(cols.factor, character)
cols.factor <- c("Major", "Major_code", "Major_category")
df <- df %>%
mutate_at(cols.factor, factor)
glimpse(df)
options(scipen=999, digits=4)
stats <- skim(df)
stats$numeric.sd / stats$numeric.mean
# The returned NA values are the character/factor variables
skim(df)
df %>% filter(Total == NA)
df %>% filter(Total == 'NA')
df %>% filter(Total == is.na(df$Total)))
df[which(is.na(df$Total))]
df[which(is.na(df$Total)),]
df.clean <- df %>% drop_na()
dim(df.clean)
for (var in colnames(select_if(df.clean, is.numeric)) ) {
g = ggplot(df.clean) +
geom_histogram( aes( unlist(df.clean[, var]) ), bins=20,
fill = "darkblue", color = "lightblue", alpha = 0.5) +
labs( title = paste("Histogram of", var),
x = Variable)
plot(g)
}
for (var in colnames(select_if(df.clean, is.numeric)) ) {
g = ggplot(df.clean) +
geom_histogram( aes( unlist(df.clean[, var]) ), bins=20,
fill = "darkblue", color = "lightblue", alpha = 0.5) +
labs( title = paste("Histogram of", var),
x = var)
plot(g)
}
for ( var in colnames( select_if(df.clean, is.numeric) ) ) {
g = ggplot(df.clean) +
geom_boxplot( aes( y = unlist(df.clean[, var]) ),
fill = "blue", color = "azure") +
labs(title = paste("Boxplot of", var),
y = var)
plot(g)
}
for ( var in colnames( select_if(df.clean, is.numeric) ) ) {
g = ggplot(df.clean) +
geom_boxplot( aes( y = unlist(df.clean[, var]) ),
fill = "blue", color = "grey") +
labs(title = paste("Boxplot of", var),
y = var)
plot(g)
}
for ( var in colnames( select_if(df.clean, is.numeric) ) ) {
g = ggplot(df.clean) +
geom_boxplot( aes( y = unlist(df.clean[, var]) ),
fill = "azure", color = "blue") +
labs(title = paste("Boxplot of", var),
y = var)
plot(g)
}
for ( var in colnames( select_if(df.clean, is.numeric) ) ) {
g = ggplot(df.clean) +
geom_boxplot( aes( y = unlist(df.clean[, var]) ),
fill = "lightblue", color = "blue") +
labs(title = paste("Boxplot of", var),
y = var)
plot(g)
}
for (var in colnames( select_if(df.clean, is.numeric)) ) {
g = ggplot(df.clean) +
geom_qq( aes( unlist( df.clean[, var])),
fill = "lightblue", color = "blue") +
labs( title = paste("QQ-plot of", var),
x = var)
plot(g)
}
for (var in colnames( select_if(df.clean, is.numeric)) ) {
g = ggplot(df.clean) +
geom_qq( aes( y = unlist( df.clean[, var])),
color = "blue") +
labs( title = paste("QQ-plot of", var),
y = var)
plot(g)
}
for (var in colnames( select_if(df.clean, is.numeric)) ) {
g = ggplot(df.clean) +
geom_qq_line( aes( y = unlist( df.clean[, var])),
color = "blue") +
labs( title = paste("QQ-plot of", var),
y = var)
plot(g)
}
for (var in colnames( select_if(df.clean, is.numeric)) ) {
g = ggplot(df.clean) +
geom_qq_line( aes( sample = unlist( df.clean[, var])),
color = "blue") +
labs( title = paste("QQ-plot of", var),
y = var)
plot(g)
}
for (var in colnames( select_if(df.clean, is.numeric)) ) {
g = ggplot(df.clean, aes( sample = unlist( df.clean[, var])) ) +
stat_qq() +
stat_qq_line() +
labs( title = paste("QQ-plot of", var) )
plot(g)
}
ks.test(df.clean$Unemployment_rate)
ks.test(df.clean$Unemployment_rate, y = pnorm)
shapiro.test(df.clean$Unemployment_rate)
ks.test(df.clean$Unemployment_rate, y = pnorm)
ks.test(df.clean$Unemployment_rate, y = pnorm)
shapiro.test(df.clean$Unemployment_rate)
shapiro.test(df.clean$Unemployment_rate)$p.value
shapiro.test(df.clean$Unemployment_rate)
norm.stats <- data.frame()
for (var in colnames( select_if( df.clean, is.numeric) ) ) {
ks <- ks.test( df.clean[, var], y = pnorm)
sh <- shapiro.test( df.clean[, var])
vals <- data.frame(
ks_test = c(ks$p.value),
shapiro_test = c(sh$p.value),
row.names = var
)
norm.stats <- bind_rows(norm.stats, vals)
}
for (var in colnames( select_if( df.clean, is.numeric) ) ) {
ks <- ks.test( df.clean[, var], y = pnorm)
sh <- shapiro.test( df.clean[, var])
vals <- data.frame(
ks_test = c(ks$p.value),
shapiro_test = c(sh$p.value),
row.names = var
)
norm.stats <- bind_rows(norm.stats, vals)
}
sh <- shapiro.test( df.clean[, var])
vals <- data.frame(
ks_test = c(ks$p.value),
shapiro_test = c(sh$p.value),
row.names = var
)
sh <- try (shapiro.test( df.clean[, var]) )
norm.stats <- data.frame()
for (var in colnames( select_if( df.clean, is.numeric) ) ) {
ks <- ks.test( df.clean[, var], y = pnorm)
#sh <- shapiro.test( df.clean[, var])
vals <- data.frame(
ks_test = c(ks$p.value),
#shapiro_test = c(sh$p.value),
row.names = var
)
norm.stats <- bind_rows(norm.stats, vals)
}
norm.stats
norm.stats <- data.frame()
for (var in colnames( select_if( df.clean, is.numeric) ) ) {
ks <- ks.test( df.clean[, var], y = pnorm)
#sh <- shapiro.test( df.clean[, var])
vals <- data.frame(
ks_test = sprintf("%6.3f" ,c(ks$p.value)),
#shapiro_test = c(sh$p.value),
row.names = var
)
norm.stats <- bind_rows(norm.stats, vals)
}
norm.stats
norm.stats <- data.frame()
for (var in colnames( select_if( df.clean, is.numeric) ) ) {
ks <- ks.test( df.clean[, var], y = pnorm)
#sh <- shapiro.test( df.clean[, var])
vals <- data.frame(
ks_test = sprintf("%6.5f" ,c(ks$p.value)),
#shapiro_test = c(sh$p.value),
row.names = var
)
norm.stats <- bind_rows(norm.stats, vals)
}
norm.stats
shapiro.test(df.clean["Rank"])
shapiro.test(df.clean["Total"])
shapiro.test(df.clean$Rank)
shapiro.test(df.clean[["Rank"]])
shapiro.test( unlist(df.clean["Rank"]) )
norm.stats <- data.frame()
for (var in colnames( select_if( df.clean, is.numeric) ) ) {
ks <- ks.test( unlist( df.clean[, var], y = pnorm) )
sh <- shapiro.test( unlist( df.clean[, var]) )
vals <- data.frame(
ks_test = sprintf("%6.5f" ,c(ks$p.value)),
shapiro_test = c(sh$p.value),
row.names = var
)
norm.stats <- bind_rows(norm.stats, vals)
}
norm.stats <- data.frame()
for (var in colnames( select_if( df.clean, is.numeric) ) ) {
ks <- ks.test( unlist( df.clean[, var] ), y = pnorm)
sh <- shapiro.test( unlist( df.clean[, var]) )
vals <- data.frame(
ks_test = sprintf("%6.5f" ,c(ks$p.value)),
shapiro_test = c(sh$p.value),
row.names = var
)
norm.stats <- bind_rows(norm.stats, vals)
}
norm.stats
norm.stats <- data.frame()
for (var in colnames( select_if( df.clean, is.numeric) ) ) {
ks <- ks.test( unlist( df.clean[, var] ), y = pnorm)
sh <- shapiro.test( unlist( df.clean[, var]) )
vals <- data.frame(
ks_test = sprintf("%6.5e" ,c(ks$p.value)),
shapiro_test = sprintf("%6.5e", c(sh$p.value) ),
row.names = var
)
norm.stats <- bind_rows(norm.stats, vals)
}
norm.stats
norm.stats <- data.frame()
for (var in colnames( select_if( df.clean, is.numeric) ) ) {
ks <- ks.test( unlist( df.clean[, var] ), y = pnorm)
sh <- shapiro.test( unlist( df.clean[, var]) )
vals <- data.frame(
ks_test = sprintf("%6.5f" ,c(ks$p.value)),
shapiro_test = sprintf("%6.5f", c(sh$p.value) ),
row.names = var
)
norm.stats <- bind_rows(norm.stats, vals)
}
remove(ks)
remove(sh)
remove(vals)
norm.stats
sapply( df.clean[colnames(select_if(df.clean, is.numeric)), ks.test)
sapply( df.clean[colnames(select_if(df.clean, is.numeric))], ks.test)
sapply( df.clean[, colnames(select_if(df.clean, is.numeric))], ks.test)
ggpairs( df.clean[, -c(1,2,3,7)] ) # we exclude the factor/character variables
ggpairs( df.clean[, -c(1,2,3,7)] )
colnames(df.clean)
df.clean %>%
select(Men, Women, Part_time, Unemployment_rate,
Non_college_jobs, Low_wage_jobs) %*%
ggpairs()
df.clean %>%
select(Men, Women, Part_time, Unemployment_rate,
Non_college_jobs, Low_wage_jobs) %>%
ggpairs()
corrs <- round( cor(df.clean[, -c(1, 2, 3, 7)]), 3)
corrplot (corrs, method = "number", type = "lower",
tl.cex = 0.8, number.cex = 0.6)
corrplot (corrs, method = "number", type = "lower",
tl.cex = 0.8, number.cex = 0.6)
